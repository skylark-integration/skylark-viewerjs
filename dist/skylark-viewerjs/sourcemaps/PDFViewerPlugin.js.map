{"version":3,"sources":["PDFViewerPlugin.js"],"names":["define","PDFJS","viewerjs","uiutils","TextLayerBuilder","PDFViewerPlugin","self","this","pages","domPages","pageText","renderingStates","RENDERING","BLANK","RUNNING","FINISHED","RUNNINGOUTDATED","TEXT_LAYER_RENDER_DELAY","container","pdfDocument","isGuessedSlideshow","scale","currentPage","maxPageWidth","maxPageHeight","createdPageCount","isScrolledIntoView","elem","style","display","docViewTop","scrollTop","docViewBottom","clientHeight","elemTop","offsetTop","elemBottom","getDomPage","page","pageNumber","getRenderingStatus","setRenderingStatus","renderStatus","updatePageDimensions","width","height","domPage","canvas","getElementsByTagName","textLayer","cssScale","CustomStyle","setProp","ensurePageRendered","getPageText","render","canvasContext","getContext","viewport","getViewport","promise","then","createPage","textLayerDiv","allPagesVisible","document","createElement","id","className","appendChild","pageIndex","getTextContent","textContent","setTextContent","isSlideshow","forEach","onLoad","showPage","initialize","viewContainer","location","i","GlobalWorkerOptions","workerSrc","getDocument","doc","numPages","getPage","getPages","fitToWidth","zoomLevel","setZoomLevel","fitToHeight","fitToPage","fitSmart","Math","min","length","getZoomLevel","onScroll","getPageInView","n","parentNode","getPluginName","getPluginVersion","String","pdfjs_version","getPluginURL"],"mappings":"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","file":"../PDFViewerPlugin.js","sourcesContent":["define([\n    \"skylark-pdfjs-display\",\n    \"./viewerjs\",\n    \"./ui_utils\",\n    \"./text_layer_builder\"\n],function(PDFJS,viewerjs,uiutils,TextLayerBuilder) {\n    function PDFViewerPlugin() {\n        \"use strict\";\n\n        function loadScript(path, callback) {\n            var script = document.createElement('script');\n            script.async = false;\n            script.src = path;\n            script.type = 'text/javascript';\n            script.onload = callback || script.onload;\n            document.getElementsByTagName('head')[0].appendChild(script);\n        }\n\n        function init(callback) {\n            var pluginCSS;\n\n            /*\n            loadScript('./compatibility.js', function () {\n                loadScript('./pdf.js');\n                loadScript('./ui_utils.js');\n                loadScript('./text_layer_builder.js');\n                loadScript('./pdfjsversion.js', callback);\n            });\n            */\n            callback();\n\n        }\n\n        var self = this,\n            pages = [],\n            domPages = [],\n            pageText = [],\n            renderingStates = [],\n            RENDERING = {\n                BLANK: 0,\n                RUNNING: 1,\n                FINISHED: 2,\n                RUNNINGOUTDATED: 3\n            },\n            TEXT_LAYER_RENDER_DELAY = 200, // ms\n            container = null,\n            pdfDocument = null,\n            pageViewScroll = null,\n            isGuessedSlideshow = true, // assume true as default, any non-matching page will unset this\n            isPresentationMode = false,\n            scale = 1,\n            currentPage = 1,\n            maxPageWidth = 0,\n            maxPageHeight = 0,\n            createdPageCount = 0;\n\n        function scrollIntoView(elem) {\n            elem.parentNode.scrollTop = elem.offsetTop;\n        }\n\n        function isScrolledIntoView(elem) {\n            if (elem.style.display === \"none\") {\n                return false;\n            }\n\n            var docViewTop = container.scrollTop,\n                docViewBottom = docViewTop + container.clientHeight,\n                elemTop = elem.offsetTop,\n                elemBottom = elemTop + elem.clientHeight;\n\n            // Is in view if either the top or the bottom of the page is between the\n            // document viewport bounds,\n            // or if the top is above the viewport and the bottom is below it.\n            return (elemTop >= docViewTop && elemTop < docViewBottom)\n                    || (elemBottom >= docViewTop && elemBottom < docViewBottom)\n                    || (elemTop < docViewTop && elemBottom >= docViewBottom);\n        }\n\n        function getDomPage(page) {\n            return domPages[page.pageNumber-1]; //modified by lwf for new pdf version\n        }\n        function getPageText(page) {\n            return pageText[page.pageNumber-1];//modified by lwf for new pdf version\n        }\n        function getRenderingStatus(page) {\n            return renderingStates[page.pageNumber-1];//modified by lwf for new pdf version\n        }\n        function setRenderingStatus(page, renderStatus) {\n            renderingStates[page.pageNumber-1] = renderStatus;//modified by lwf for new pdf version\n        }\n\n        function updatePageDimensions(page, width, height) {\n            var domPage = getDomPage(page),\n                canvas = domPage.getElementsByTagName('canvas')[0],\n                textLayer = domPage.getElementsByTagName('div')[0],\n                cssScale = 'scale(' + scale + ', ' + scale + ')';\n\n            domPage.style.width = width + \"px\";\n            domPage.style.height = height + \"px\";\n\n            canvas.width = width;\n            canvas.height = height;\n            canvas.style.width = width + \"px\";\n            canvas.style.height = height + \"px\";\n\n\n            textLayer.style.width = width + \"px\";\n            textLayer.style.height = height + \"px\";\n\n            uiutils.CustomStyle.setProp('transform', textLayer, cssScale);\n            uiutils.CustomStyle.setProp('transformOrigin', textLayer, '0% 0%');\n\n            if (getRenderingStatus(page) === RENDERING.RUNNING) {\n                // TODO: should be able to cancel that rendering\n                setRenderingStatus(page, RENDERING.RUNNINGOUTDATED);\n            } else {\n                // Once the page dimension is updated, the rendering state is blank.\n                setRenderingStatus(page, RENDERING.BLANK);\n            }\n        }\n\n        function ensurePageRendered(page) {\n            var domPage, textLayer, canvas;\n\n            if (getRenderingStatus(page) === RENDERING.BLANK) {\n                setRenderingStatus(page, RENDERING.RUNNING);\n\n                domPage = getDomPage(page);\n                textLayer = getPageText(page);\n                canvas = domPage.getElementsByTagName('canvas')[0];\n\n                page.render({\n                    canvasContext: canvas.getContext('2d'),\n                    textLayer: textLayer,\n                    viewport: page.getViewport({scale}) //modified by lwf for new pdf version\n                }).promise.then(function () {\n                    /*\n                    if (getRenderingStatus(page) === RENDERING.RUNNINGOUTDATED) {\n                        // restart\n                        setRenderingStatus(page, RENDERING.BLANK);\n                        ensurePageRendered(page);\n                    } else {\n                        setRenderingStatus(page, RENDERING.FINISHED);\n                    }\n                    */\n                });\n            }\n        }\n\n        function completeLoading() {\n            var allPagesVisible = !self.isSlideshow();\n            domPages.forEach(function (domPage) {\n                if (allPagesVisible) {\n                    domPage.style.display = \"block\";\n                }\n                container.appendChild(domPage);\n            });\n\n            self.onLoad();\n            self.showPage(1);\n        }\n\n        function createPage(page) {\n            var pageNumber,\n                textLayerDiv,\n                textLayer,\n                canvas,\n                domPage,\n                viewport;\n\n            pageNumber = page.pageNumber; // page.pageIndex + 1; modified by lwf for new pdf version\n\n            viewport = page.getViewport({scale});//viewport = page.getViewport(scale);modified by lwf for new pdf version\n\n            domPage = document.createElement('div');\n            domPage.id = 'pageContainer' + pageNumber;\n            domPage.className = 'page';\n            domPage.style.display = \"none\";\n\n            canvas = document.createElement('canvas');\n            canvas.id = 'canvas' + pageNumber;\n\n            textLayerDiv = document.createElement('div');\n            textLayerDiv.className = 'textLayer';\n            textLayerDiv.id = 'textLayer' + pageNumber;\n\n            domPage.appendChild(canvas);\n            domPage.appendChild(textLayerDiv);\n\n            pages[page.pageNumber-1] = page; //modified by lwf for new pdf version\n            domPages[page.pageNumber-1] = domPage; //modified by lwf for new pdf version\n            renderingStates[page.pageNumber-1] = RENDERING.BLANK;\n\n            updatePageDimensions(page, viewport.width, viewport.height);\n            if (maxPageWidth < viewport.width) {\n                maxPageWidth = viewport.width;\n            }\n            if (maxPageHeight < viewport.height) {\n                maxPageHeight = viewport.height;\n            }\n            // A very simple but generally true guess - if any page has the height greater than the width, treat it no longer as a slideshow\n            if (viewport.width < viewport.height) {\n                isGuessedSlideshow = false;\n            }\n\n            textLayer = new TextLayerBuilder({\n                textLayerDiv: textLayerDiv,\n                viewport: viewport,\n                pageIndex: pageNumber - 1\n            });\n            page.getTextContent().then(function (textContent) {\n                textLayer.setTextContent(textContent);\n                textLayer.render(TEXT_LAYER_RENDER_DELAY);\n            });\n            pageText[page.pageNumber-1] = textLayer; //modified by lwf for new pdf version\n\n            createdPageCount += 1;\n            if (createdPageCount === (pdfDocument.numPages)) {\n                completeLoading();\n            }\n        }\n\n        this.initialize = function (viewContainer, location) {\n            var self = this,\n                i,\n                pluginCSS;\n\n\n            init(function () {\n                PDFJS.GlobalWorkerOptions.workerSrc = \"./skylark-pdfjs-worker-all.js\"; //PDFJS.workerSrc = \"./skylark-pdfjs-worker-all.js\"; modified by lwf for new pdf version\n                //PDFJS.getDocument(location).then(function loadPDF(doc) {\n                PDFJS.getDocument(location).promise.then(function loadPDF(doc) {\n                    pdfDocument = doc;\n                    container = viewContainer;\n\n                    for (i = 0; i < pdfDocument.numPages; i += 1) {\n                        pdfDocument.getPage(i + 1).then(createPage);\n                    }\n                });\n            });\n        };\n\n        this.isSlideshow = function () {\n            return isGuessedSlideshow;\n        };\n\n        this.onLoad = function () {};\n\n        this.getPages = function () {\n            return domPages;\n        };\n\n        this.fitToWidth = function (width) {\n            var zoomLevel;\n\n            if (maxPageWidth === width) {\n                return;\n            }\n            zoomLevel = width / maxPageWidth;\n            self.setZoomLevel(zoomLevel);\n        };\n\n        this.fitToHeight = function (height) {\n            var zoomLevel;\n\n            if (maxPageHeight === height) {\n                return;\n            }\n            zoomLevel = height / maxPageHeight;\n            self.setZoomLevel(zoomLevel);\n        };\n\n        this.fitToPage = function (width, height) {\n            var zoomLevel = width / maxPageWidth;\n            if (height / maxPageHeight < zoomLevel) {\n                zoomLevel = height / maxPageHeight;\n            }\n            self.setZoomLevel(zoomLevel);\n        };\n\n        this.fitSmart = function (width, height) {\n            var zoomLevel = width / maxPageWidth;\n            if (height && (height / maxPageHeight) < zoomLevel) {\n                zoomLevel = height / maxPageHeight;\n            }\n            zoomLevel = Math.min(1.0, zoomLevel);\n            self.setZoomLevel(zoomLevel);\n        };\n\n        this.setZoomLevel = function (zoomLevel) {\n            var i, viewport;\n\n            if (scale !== zoomLevel) {\n                scale = zoomLevel;\n\n                for (i = 0; i < pages.length; i += 1) {\n                    viewport = pages[i].getViewport({scale}); //modified by lwf for new pdf version\n                    updatePageDimensions(pages[i], viewport.width, viewport.height);\n                }\n            }\n        };\n\n        this.getZoomLevel = function () {\n            return scale;\n        };\n\n        this.onScroll = function () {\n            var i;\n\n            for (i = 0; i < domPages.length; i += 1) {\n                if (isScrolledIntoView(domPages[i])) {\n                    ensurePageRendered(pages[i]);\n                }\n            }\n        };\n\n        this.getPageInView = function () {\n            var i;\n\n            if (self.isSlideshow()) {\n                return currentPage;\n            } else {\n                for (i = 0; i < domPages.length; i += 1) {\n                    if (isScrolledIntoView(domPages[i])) {\n                        return i + 1;\n                    }\n                }\n            }\n        };\n\n        this.showPage = function (n) {\n            if (self.isSlideshow()) {\n                domPages[currentPage - 1].style.display = \"none\";\n                currentPage = n;\n                ensurePageRendered(pages[n - 1]);\n                domPages[n - 1].style.display = \"block\";\n            } else {\n                scrollIntoView(domPages[n - 1]);\n            }\n        };\n\n        this.getPluginName = function () {\n            return \"PDF.js\"\n        };\n\n        this.getPluginVersion = function () {\n            var version = (String(typeof pdfjs_version) !== \"undefined\"\n                ? pdfjs_version\n                : \"From Source\"\n            );\n            return version;\n        };\n\n        this.getPluginURL = function () {\n            return \"https://github.com/mozilla/pdf.js/\";\n        };\n    }\n\n    return viewerjs.PDFViewerPlugin = PDFViewerPlugin;\n});"]}