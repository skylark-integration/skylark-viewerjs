{"version":3,"sources":["init.js"],"names":["define","viewerjs","Viewer","pluginRegistry","doEstimateTypeByFileExtension","extension","matchingPluginData","some","pluginData","supportsFileExtension","init","window","onload","Plugin","documentUrl","document","location","hash","substring","parameters","search","substr","split","forEach","q","s","decodeURIComponent","parseSearchParameters","title","replace","cb","xhr","XMLHttpRequest","onreadystatechange","mimetype","readyState","status","getResponseHeader","supportsMimetype","console","log","open","send","estimateTypeByHeaderContentType","type","pop","estimateTypeByFileExtensionFromPath","String","loadPlugin","path","getClass"],"mappings":";;;;;;;AAAAA,QACI,aACH,WACA,qBAEC,SAASC,EAASC,EAAOC,GA+CvB,SAASC,EAA8BC,GACnC,IAAIC,EAUJ,OARAH,EAAeI,KAAK,SAASC,GACzB,QAAIA,EAAWC,sBAAsBJ,KACjCC,EAAqBE,GACd,KAKRF,EA0Eb,OAAOL,EAASS,KA9CjB,WACGC,OAAOC,OAAS,WACX,IAGIC,EAFAC,EAAcC,SAASC,SAASC,KAAKC,UAAU,GAC/CC,EAvFT,SAA+BH,GAC3B,IAAIG,KAaJ,OAZaH,EAASI,QAAU,KAEzBC,OAAO,GAAGC,MAAM,KAAKC,QAAQ,SAAUC,GAE1C,GAAKA,EAAL,CAIA,IAAIC,EAAID,EAAEF,MAAM,IAAK,GACrBH,EAAWO,mBAAmBD,EAAE,KAAOC,mBAAmBD,EAAE,OAGzDN,EAyEWQ,CAAsBZ,SAASC,UAG5CF,GAEKK,EAAWS,QACZT,EAAWS,MAAQd,EAAYe,QAAQ,YAAa,KAGxDV,EAAWL,YAAcA,EA/ElC,SAAyCA,EAAagB,GAClD,IAAIC,EAAM,IAAIC,eACdD,EAAIE,mBAAqB,WACrB,IAAIC,EAAU5B,EACS,IAAnByB,EAAII,cACCJ,EAAIK,QAAU,KAAOL,EAAIK,OAAS,KAAuB,IAAfL,EAAIK,UAC/CF,EAAWH,EAAIM,kBAAkB,kBAG7BlC,EAAeI,KAAK,SAASC,GACzB,QAAIA,EAAW8B,iBAAiBJ,KAC5B5B,EAAqBE,EACrB+B,QAAQC,IAAI,0CAA4CN,IACjD,KAMvBJ,EAAGxB,KAGXyB,EAAIU,KAAK,OAAQ3B,GAAa,GAC9BiB,EAAIW,OA2DCC,CAAgC7B,EAAa,SAASN,GAxC/D,IAAqCH,EAC7BC,EAwCUE,IACGW,EAAWyB,MA1CKvC,EA2CyBc,EAAWyB,MA1CjEtC,EAAqBF,EAA8BC,KAGnDkC,QAAQC,IAAI,mCAAqCnC,GAuCpCG,EApCVF,GAuCUE,EAnCrB,SAA6CM,GAEzC,IACIT,EADeS,EAAYQ,MAAM,KAAK,GACbA,MAAM,KAAKuB,MACpCvC,EAAqBF,EAA8BC,GAMvD,OAJIC,GACAiC,QAAQC,IAAI,6CAA+CnC,GAGxDC,EAyBuBwC,CAAoChC,IAIrDN,EACkC,cAA9BuC,cAAcC,YACdA,WAAWxC,EAAWyC,KAAM,WACxBpC,EAASL,EAAW0C,WACX,IAAIhD,EAAO,IAAIW,EAAUM,MAGtCN,EAASL,EAAW0C,WACX,IAAIhD,EAAO,IAAIW,EAAUM,IAG7B,IAAIjB,KAIZ,IAAIA","file":"../init.js","sourcesContent":["define([\r\n    \"./viewerjs\",\r\n\t\"./viewer\",\r\n\t\"./plugin_registry\"\r\n\r\n],function(viewerjs,Viewer,pluginRegistry){\r\n\tvar viewer;\r\n\r\n    function parseSearchParameters(location) {\r\n        var parameters = {},\r\n            search = location.search || \"?\";\r\n\r\n        search.substr(1).split('&').forEach(function (q) {\r\n            // skip empty strings\r\n            if (!q) {\r\n                return;\r\n            }\r\n            // if there is no '=', have it handled as if given key was set to undefined\r\n            var s = q.split('=', 2);\r\n            parameters[decodeURIComponent(s[0])] = decodeURIComponent(s[1]);\r\n        });\r\n\r\n        return parameters;\r\n    }\r\n\r\n    function estimateTypeByHeaderContentType(documentUrl, cb) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.onreadystatechange = function() {\r\n            var mimetype, matchingPluginData;\r\n            if (xhr.readyState === 4) {\r\n                if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 0) {\r\n                    mimetype = xhr.getResponseHeader('content-type');\r\n\r\n                    if (mimetype) {\r\n                        pluginRegistry.some(function(pluginData) {\r\n                            if (pluginData.supportsMimetype(mimetype)) {\r\n                                matchingPluginData = pluginData;\r\n                                console.log('Found plugin by mimetype and xhr head: ' + mimetype);\r\n                                return true;\r\n                            }\r\n                            return false;\r\n                        });\r\n                    }\r\n                }\r\n                cb(matchingPluginData);\r\n            }\r\n        };\r\n        xhr.open(\"HEAD\", documentUrl, true);\r\n        xhr.send();\r\n    }\r\n\r\n\r\n    function doEstimateTypeByFileExtension(extension) {\r\n        var matchingPluginData;\r\n\r\n        pluginRegistry.some(function(pluginData) {\r\n            if (pluginData.supportsFileExtension(extension)) {\r\n                matchingPluginData = pluginData;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        return matchingPluginData;\r\n    }\r\n\r\n\r\n    function estimateTypeByFileExtension(extension) {\r\n        var matchingPluginData = doEstimateTypeByFileExtension(extension)\r\n\r\n        if (matchingPluginData) {\r\n            console.log('Found plugin by parameter type: ' + extension);\r\n        }\r\n\r\n        return matchingPluginData;\r\n    }\r\n\r\n\r\n    function estimateTypeByFileExtensionFromPath(documentUrl) {\r\n        // See to get any path from the url and grep what could be a file extension\r\n        var documentPath = documentUrl.split('?')[0],\r\n            extension = documentPath.split('.').pop(),\r\n            matchingPluginData = doEstimateTypeByFileExtension(extension)\r\n\r\n        if (matchingPluginData) {\r\n            console.log('Found plugin by file extension from path: ' + extension);\r\n        }\r\n\r\n        return matchingPluginData;\r\n    }\r\n\r\n\tfunction init() {\r\n\t   window.onload = function () {\r\n\t        var viewer,\r\n\t            documentUrl = document.location.hash.substring(1),\r\n\t            parameters = parseSearchParameters(document.location),\r\n\t            Plugin;\r\n\r\n\t        if (documentUrl) {\r\n\t            // try to guess the title as filename from the location, if not set by parameter\r\n\t            if (!parameters.title) {\r\n\t                parameters.title = documentUrl.replace(/^.*[\\\\\\/]/, '');\r\n\t            }\r\n\r\n\t            parameters.documentUrl = documentUrl;\r\n\r\n\t            // trust the server most\r\n\t            estimateTypeByHeaderContentType(documentUrl, function(pluginData) {\r\n\t                if (!pluginData) {\r\n\t                    if (parameters.type) {\r\n\t                        pluginData = estimateTypeByFileExtension(parameters.type);\r\n\t                    } else {\r\n\t                        // last ressort: try to guess from path\r\n\t                        pluginData = estimateTypeByFileExtensionFromPath(documentUrl);\r\n\t                    }\r\n\t                }\r\n\r\n\t                if (pluginData) {\r\n\t                    if (String(typeof loadPlugin) !== \"undefined\") {\r\n\t                        loadPlugin(pluginData.path, function () {\r\n\t                            Plugin = pluginData.getClass();\r\n\t                            viewer = new Viewer(new Plugin(), parameters);\r\n\t                        });\r\n\t                    } else {\r\n\t                        Plugin = pluginData.getClass();\r\n\t                        viewer = new Viewer(new Plugin(), parameters);\r\n\t                    }\r\n\t                } else {\r\n\t                    viewer = new Viewer();\r\n\t                }\r\n\t            });\r\n\t        } else {\r\n\t            viewer = new Viewer();\r\n\t        }\r\n\t    };\r\n\t}\r\n \r\n \treturn viewerjs.init = init;\r\n});\r\n\r\n\r\n"]}