{"version":3,"sources":["ODFViewerPlugin.js"],"names":["define","webodf","viewerjs","ODFViewerPlugin","self","this","odfCanvas","odfElement","root","documentType","initialize","viewerElement","documentUrl","session","sessionController","odtDocument","shadowCursor","selectionViewManager","caretManager","hyperlinkTooltipView","eventManager","document","getElementById","odf","OdfCanvas","load","addListener","odfContainer","rootElement","getDocumentType","enableAnnotations","ops","Session","getOdtDocument","gui","ShadowCursor","SessionController","getEventManager","CaretManager","getViewport","SelectionViewManager","SvgSelectionView","SessionView","caretAvatarsInitiallyVisible","getSessionConstraints","registerCursor","HyperlinkTooltipView","getHyperlinkClickHandler","getModifier","subscribe","showTooltip","hideTooltip","op","OpAddMember","init","memberid","setProperties","fillName","runtime","tr","color","enqueue","insertLocalCursor","onLoad","isSlideshow","fitToWidth","width","fitToHeight","height","fitToPage","fitToContainingElement","fitSmart","getZoomLevel","setZoomLevel","value","getPages","i","tuple","prefix","pageNodes","Array","prototype","slice","call","getElementsByTagNameNS","draw","presentation","text","office","console","log","pages","length","getAttribute","push","showPage","n","getPluginName","getPluginVersion","String","Version","getPluginURL"],"mappings":";;;;;;;AAAAA,QACI,iBACA,cACF,SAASC,EAAOC,GAwLd,OAAOA,EAASC,gBAvLhB,WACI,aAyCA,IAAIC,EAAOC,KAGPC,EAAY,KACZC,EAAa,KAEbC,EAAO,KACPC,EAAe,KAInBJ,KAAKK,WAAa,SAAUC,EAAeC,GAElC,IACGC,EACAC,EAEAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EAEJb,EAAac,SAASC,eAAe,WACrChB,EAAY,IAAIL,EAAOsB,IAAIC,UAAUjB,IAC3BkB,KAAKb,GAEfN,EAAUoB,YAAY,mBAAoB,WAItC,GAHAlB,EAAOF,EAAUqB,eAAeC,YAGX,UADrBnB,EAAeH,EAAUqB,eAAeE,gBAAgBrB,IAC3B,CACzBF,EAAUwB,mBAAkB,GAAM,GAElCjB,EAAU,IAAIkB,IAAIC,QAAQ1B,GAC1BS,EAAcF,EAAQoB,iBACtBjB,EAAe,IAAIkB,IAAIC,aAAapB,GACpCD,EAAoB,IAAIoB,IAAIE,kBAAkBvB,EAlBlC,YAkB0DG,MACtEI,EAAeN,EAAkBuB,kBACjCnB,EAAe,IAAIgB,IAAII,aAAaxB,EAAmBR,EAAUiC,eACjEtB,EAAuB,IAAIiB,IAAIM,qBAAqBN,IAAIO,kBAC1C,IAAIP,IAAIQ,aAClBC,8BAA8B,GAvBtB,YAwBM9B,EAASC,EAAkB8B,wBAAyB1B,EAAcD,GACpFA,EAAqB4B,eAAe7B,GACpCG,EAAuB,IAAIe,IAAIY,qBAAqBxC,EAChDQ,EAAkBiC,2BAA2BC,aACjD5B,EAAa6B,UAAU,YAAa9B,EAAqB+B,aACzD9B,EAAa6B,UAAU,WAAY9B,EAAqBgC,aAExD,IAAIC,EAAK,IAAIrB,IAAIsB,YACjBD,EAAGE,MACCC,SAjCQ,YAkCRC,eACIC,SAAUxD,EAAOyD,QAAQC,GAAG,kBAC5BC,MAAO,UAGf/C,EAAQgD,SAAST,IACjBtC,EAAkBgD,oBAGtB1D,EAAK2D,YAKjB1D,KAAK2D,YAAc,WACf,MAAwB,iBAAjBvD,GAGXJ,KAAK0D,OAAS,aAEd1D,KAAK4D,WAAa,SAAUC,GACxB5D,EAAU2D,WAAWC,IAGzB7D,KAAK8D,YAAc,SAAUC,GACzB9D,EAAU6D,YAAYC,IAG1B/D,KAAKgE,UAAY,SAAUH,EAAOE,GAC9B9D,EAAUgE,uBAAuBJ,EAAOE,IAG5C/D,KAAKkE,SAAW,SAAUL,GACtB5D,EAAUiE,SAASL,IAGvB7D,KAAKmE,aAAe,WAChB,OAAOlE,EAAUkE,gBAGrBnE,KAAKoE,aAAe,SAAUC,GAC1BpE,EAAUmE,aAAaC,IAI3BrE,KAAKsE,SAAW,WACZ,IAEIC,EACAC,EAlHYC,EA+GZC,EAAYC,MAAMC,UAAUC,MAAMC,KAAK3E,EAAK4E,wBA7G5CC,KAAS,oDACTC,aAAiB,yDACjBC,KAAS,iDACTC,OAAW,oDALCV,EA+GkE,SAxG7DW,QAAQC,IAAI,WAAaZ,EAAS,cAwGoC,SACvFa,KAIJ,IAAKf,EAAI,EAAGA,EAAIG,EAAUa,OAAQhB,GAAK,EACnCC,GACIE,EAAUH,GAAGiB,aAAa,aAC1Bd,EAAUH,IAEde,EAAMG,KAAKjB,GAEf,OAAOc,GAGXtF,KAAK0F,SAAW,SAAUC,GACtB1F,EAAUyF,SAASC,IAGvB3F,KAAK4F,cAAgB,WACjB,MAxHa,UA2HjB5F,KAAK6F,iBAAmB,WASpB,MAN8B,cAA1BC,cAAclG,GACJA,EAAOmG,QAEP,WAMlB/F,KAAKgG,aAAe,WAChB,MAvIY","file":"../ODFViewerPlugin.js","sourcesContent":["define([\n    \"skylark-webodf\",\n    \"./viewerjs\"\n],function(webodf,viewerjs) {\n    function ODFViewerPlugin() {\n        \"use strict\";\n\n        function init(callback) {\n            /*\n            var lib = document.createElement('script'),\n                pluginCSS;\n\n            lib.async = false;\n            lib.src = './webodf.js';\n            lib.type = 'text/javascript';\n            lib.onload = function () {\n                runtime.loadClass('gui.HyperlinkClickHandler');\n                runtime.loadClass('odf.OdfCanvas');\n                runtime.loadClass('ops.Session');\n                runtime.loadClass('gui.CaretManager');\n                runtime.loadClass(\"gui.HyperlinkTooltipView\");\n                runtime.loadClass('gui.SessionController');\n                runtime.loadClass('gui.SvgSelectionView');\n                runtime.loadClass('gui.SelectionViewManager');\n                runtime.loadClass('gui.ShadowCursor');\n                runtime.loadClass('gui.SessionView');\n\n                callback();\n            };\n\n            document.head.appendChild(lib);\n            */\n            callback();\n        }\n\n        // that should probably be provided by webodf\n        function nsResolver(prefix) {\n            var ns = {\n                'draw' : \"urn:oasis:names:tc:opendocument:xmlns:drawing:1.0\",\n                'presentation' : \"urn:oasis:names:tc:opendocument:xmlns:presentation:1.0\",\n                'text' : \"urn:oasis:names:tc:opendocument:xmlns:text:1.0\",\n                'office' : \"urn:oasis:names:tc:opendocument:xmlns:office:1.0\"\n            };\n            return ns[prefix] || console.log('prefix [' + prefix + '] unknown.');\n        }\n\n        var self = this,\n            pluginName = \"WebODF\",\n            pluginURL = \"http://webodf.org\",\n            odfCanvas = null,\n            odfElement = null,\n            initialized = false,\n            root = null,\n            documentType = null,\n            pages = [],\n            currentPage = null;\n\n        this.initialize = function (viewerElement, documentUrl) {\n            // If the URL has a fragment (#...), try to load the file it represents\n            init(function () {\n                var session,\n                    sessionController,\n                    sessionView,\n                    odtDocument,\n                    shadowCursor,\n                    selectionViewManager,\n                    caretManager,\n                    localMemberId = 'localuser',\n                    hyperlinkTooltipView,\n                    eventManager;\n\n                odfElement = document.getElementById('canvas');\n                odfCanvas = new webodf.odf.OdfCanvas(odfElement);\n                odfCanvas.load(documentUrl);\n\n                odfCanvas.addListener('statereadychange', function () {\n                    root = odfCanvas.odfContainer().rootElement;\n                    initialized = true;\n                    documentType = odfCanvas.odfContainer().getDocumentType(root);\n                    if (documentType === 'text') {\n                        odfCanvas.enableAnnotations(true, false);\n\n                        session = new ops.Session(odfCanvas);\n                        odtDocument = session.getOdtDocument();\n                        shadowCursor = new gui.ShadowCursor(odtDocument);\n                        sessionController = new gui.SessionController(session, localMemberId, shadowCursor, {});\n                        eventManager = sessionController.getEventManager();\n                        caretManager = new gui.CaretManager(sessionController, odfCanvas.getViewport());\n                        selectionViewManager = new gui.SelectionViewManager(gui.SvgSelectionView);\n                        sessionView = new gui.SessionView({\n                            caretAvatarsInitiallyVisible: false\n                        }, localMemberId, session, sessionController.getSessionConstraints(), caretManager, selectionViewManager);\n                        selectionViewManager.registerCursor(shadowCursor);\n                        hyperlinkTooltipView = new gui.HyperlinkTooltipView(odfCanvas,\n                            sessionController.getHyperlinkClickHandler().getModifier);\n                        eventManager.subscribe(\"mousemove\", hyperlinkTooltipView.showTooltip);\n                        eventManager.subscribe(\"mouseout\", hyperlinkTooltipView.hideTooltip);\n\n                        var op = new ops.OpAddMember();\n                        op.init({\n                            memberid: localMemberId,\n                            setProperties: {\n                                fillName: webodf.runtime.tr(\"Unknown Author\"),\n                                color: \"blue\"\n                            }\n                        });\n                        session.enqueue([op]);\n                        sessionController.insertLocalCursor();\n                    }\n\n                    self.onLoad();\n                });\n            });\n        };\n\n        this.isSlideshow = function () {\n            return documentType === 'presentation';\n        };\n\n        this.onLoad = function () {};\n\n        this.fitToWidth = function (width) {\n            odfCanvas.fitToWidth(width);\n        };\n\n        this.fitToHeight = function (height) {\n            odfCanvas.fitToHeight(height);\n        };\n\n        this.fitToPage = function (width, height) {\n            odfCanvas.fitToContainingElement(width, height);\n        };\n\n        this.fitSmart = function (width) {\n            odfCanvas.fitSmart(width);\n        };\n\n        this.getZoomLevel = function () {\n            return odfCanvas.getZoomLevel();\n        };\n\n        this.setZoomLevel = function (value) {\n            odfCanvas.setZoomLevel(value);\n        };\n\n        // return a list of tuples (pagename, pagenode)\n        this.getPages = function () {\n            var pageNodes = Array.prototype.slice.call(root.getElementsByTagNameNS(nsResolver('draw'), 'page')),\n                pages  = [],\n                i,\n                tuple;\n\n            for (i = 0; i < pageNodes.length; i += 1) {\n                tuple = [\n                    pageNodes[i].getAttribute('draw:name'),\n                    pageNodes[i]\n                ];\n                pages.push(tuple);\n            }\n            return pages;\n        };\n\n        this.showPage = function (n) {\n            odfCanvas.showPage(n);\n        };\n\n        this.getPluginName = function () {\n            return pluginName;\n        };\n\n        this.getPluginVersion = function () {\n            var version;\n\n            if (String(typeof webodf) !== \"undefined\") {\n                version = webodf.Version;\n            } else {\n                version = \"Unknown\";\n            }\n\n            return version;\n        };\n\n        this.getPluginURL = function () {\n            return pluginURL;\n        };\n    }\n\n    return viewerjs.ODFViewerPlugin = ODFViewerPlugin;\n});\n\n\n"]}