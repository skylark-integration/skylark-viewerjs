{"version":3,"sources":["skylark-viewerjs.js"],"names":[],"mappingsfile":"../skylark-viewerjs.js","sourcesContent":["define('skylark-viewerjs/viewerjs',[\r\n\t\"skylark-langx-ns\"\r\n],function(skylark) {\r\n\treturn skylark.attach(\"intg.viewerjs\");\r\n});\ndefine('skylark-viewerjs/viewer',[\n    \"./viewerjs\"\n],function(viewerjs) {\n    /*global document, window*/\n\n    function Viewer(viewerPlugin, parameters) {\n        \"use strict\";\n\n        var self = this,\n            kScrollbarPadding = 40,\n            kMinScale = 0.25,\n            kMaxScale = 4.0,\n            kDefaultScaleDelta = 1.1,\n            kDefaultScale = 'auto',\n            presentationMode = false,\n            isFullScreen = false,\n            initialized = false,\n            url,\n            viewerElement = document.getElementById('viewer'),\n            canvasContainer = document.getElementById('canvasContainer'),\n            overlayNavigator = document.getElementById('overlayNavigator'),\n            titlebar = document.getElementById('titlebar'),\n            toolbar = document.getElementById('toolbarContainer'),\n            pageSwitcher = document.getElementById('toolbarLeft'),\n            zoomWidget = document.getElementById('toolbarMiddleContainer'),\n            scaleSelector = document.getElementById('scaleSelect'),\n            dialogOverlay = document.getElementById('dialogOverlay'),\n            toolbarRight = document.getElementById('toolbarRight'),\n            aboutDialog,\n            pages = [],\n            currentPage,\n            scaleChangeTimer,\n            touchTimer,\n            toolbarTouchTimer,\n            /**@const*/\n            UI_FADE_DURATION = 5000;\n\n        function isBlankedOut() {\n            return (blanked.style.display === 'block');\n        }\n\n        function initializeAboutInformation() {\n            var aboutDialogCentererTable, aboutDialogCentererCell, aboutButton, pluginName, pluginVersion, pluginURL,\n                version;\n\n            version = (String(typeof ViewerJS_version) !== \"undefined\" ? ViewerJS_version : \"From Source\");\n            if (viewerPlugin) {\n                pluginName = viewerPlugin.getPluginName();\n                pluginVersion = viewerPlugin.getPluginVersion();\n                pluginURL = viewerPlugin.getPluginURL();\n            }\n\n            // Create dialog\n            aboutDialogCentererTable = document.createElement('div');\n            aboutDialogCentererTable.id = \"aboutDialogCentererTable\";\n            aboutDialogCentererCell = document.createElement('div');\n            aboutDialogCentererCell.id = \"aboutDialogCentererCell\";\n            aboutDialog = document.createElement('div');\n            aboutDialog.id = \"aboutDialog\";\n            aboutDialog.innerHTML =\n                \"<h1>ViewerJS</h1>\" +\n                \"<p>Open Source document viewer for webpages, built with HTML and JavaScript.</p>\" +\n                \"<p>Learn more and get your own copy on the <a href=\\\"http://viewerjs.org/\\\" target=\\\"_blank\\\">ViewerJS website</a>.</p>\" +\n                (viewerPlugin ? (\"<p>Using the <a href = \\\"\"+ pluginURL + \"\\\" target=\\\"_blank\\\">\" + pluginName + \"</a> \" +\n                                \"(<span id = \\\"pluginVersion\\\">\" + pluginVersion + \"</span>) \" +\n                                \"plugin to show you this document.</p>\")\n                             : \"\") +\n                \"<p>Version \" + version + \"</p>\" +\n                \"<p>Supported by <a href=\\\"https://nlnet.nl\\\" target=\\\"_blank\\\"><br><img src=\\\"images\\/nlnet.png\\\" width=\\\"160\\\" height=\\\"60\\\" alt=\\\"NLnet Foundation\\\"></a></p>\" +\n                \"<p>Made by <a href=\\\"http://kogmbh.com\\\" target=\\\"_blank\\\"><br><img src=\\\"images\\/kogmbh.png\\\" width=\\\"172\\\" height=\\\"40\\\" alt=\\\"KO GmbH\\\"></a></p>\" +\n                \"<button id = \\\"aboutDialogCloseButton\\\" class = \\\"toolbarButton textButton\\\">Close</button>\";\n            dialogOverlay.appendChild(aboutDialogCentererTable);\n            aboutDialogCentererTable.appendChild(aboutDialogCentererCell);\n            aboutDialogCentererCell.appendChild(aboutDialog);\n\n            // Create button to open dialog that says \"ViewerJS\"\n            aboutButton = document.createElement('button');\n            aboutButton.id = \"about\";\n            aboutButton.className = \"toolbarButton textButton about\";\n            aboutButton.title = \"About\";\n            aboutButton.innerHTML = \"ViewerJS\"\n            toolbarRight.appendChild(aboutButton);\n\n            // Attach events to the above\n            aboutButton.addEventListener('click', function () {\n                    showAboutDialog();\n            });\n            document.getElementById('aboutDialogCloseButton').addEventListener('click', function () {\n                    hideAboutDialog();\n            });\n\n        }\n\n        function showAboutDialog() {\n            dialogOverlay.style.display = \"block\";\n        }\n\n        function hideAboutDialog() {\n            dialogOverlay.style.display = \"none\";\n        }\n\n        function selectScaleOption(value) {\n            // Retrieve the options from the zoom level <select> element\n            var options = scaleSelector.options,\n                option,\n                predefinedValueFound = false,\n                i;\n\n            for (i = 0; i < options.length; i += 1) {\n                option = options[i];\n                if (option.value !== value) {\n                    option.selected = false;\n                    continue;\n                }\n                option.selected = true;\n                predefinedValueFound = true;\n            }\n            return predefinedValueFound;\n        }\n\n        function getPages() {\n            return viewerPlugin.getPages();\n        }\n\n        function setScale(val, resetAutoSettings) {\n            if (val === self.getZoomLevel()) {\n                return;\n            }\n\n            self.setZoomLevel(val);\n\n            var event = document.createEvent('UIEvents');\n            event.initUIEvent('scalechange', false, false, window, 0);\n            event.scale = val;\n            event.resetAutoSettings = resetAutoSettings;\n            window.dispatchEvent(event);\n        }\n\n        function onScroll() {\n            var pageNumber;\n\n            if (viewerPlugin.onScroll) {\n                viewerPlugin.onScroll();\n            }\n            if (viewerPlugin.getPageInView) {\n                pageNumber = viewerPlugin.getPageInView();\n                if (pageNumber) {\n                    currentPage = pageNumber;\n                    document.getElementById('pageNumber').value = pageNumber;\n                }\n            }\n        }\n\n        function delayedRefresh(milliseconds) {\n            window.clearTimeout(scaleChangeTimer);\n            scaleChangeTimer = window.setTimeout(function () {\n                onScroll();\n            }, milliseconds);\n        }\n\n        function parseScale(value, resetAutoSettings) {\n            var scale,\n                maxWidth,\n                maxHeight;\n\n            if (value === 'custom') {\n                scale = parseFloat(document.getElementById('customScaleOption').textContent) / 100;\n            } else {\n                scale = parseFloat(value);\n            }\n\n            if (scale) {\n                setScale(scale, true);\n                delayedRefresh(300);\n                return;\n            }\n\n            maxWidth = canvasContainer.clientWidth - kScrollbarPadding;\n            maxHeight = canvasContainer.clientHeight - kScrollbarPadding;\n\n            switch (value) {\n            case 'page-actual':\n                setScale(1, resetAutoSettings);\n                break;\n            case 'page-width':\n                viewerPlugin.fitToWidth(maxWidth);\n                break;\n            case 'page-height':\n                viewerPlugin.fitToHeight(maxHeight);\n                break;\n            case 'page-fit':\n                viewerPlugin.fitToPage(maxWidth, maxHeight);\n                break;\n            case 'auto':\n                if (viewerPlugin.isSlideshow()) {\n                    viewerPlugin.fitToPage(maxWidth + kScrollbarPadding, maxHeight + kScrollbarPadding);\n                } else {\n                    viewerPlugin.fitSmart(maxWidth);\n                }\n                break;\n            }\n\n            selectScaleOption(value);\n            delayedRefresh(300);\n        }\n\n        function readZoomParameter(zoom) {\n            var validZoomStrings = [\"auto\", \"page-actual\", \"page-width\"],\n                number;\n\n            if (validZoomStrings.indexOf(zoom) !== -1) {\n                return zoom;\n            }\n            number = parseFloat(zoom);\n            if (number && kMinScale <= number && number <= kMaxScale) {\n                return zoom;\n            }\n            return kDefaultScale;\n        }\n\n        function readStartPageParameter(startPage) {\n            var result = parseInt(startPage, 10);\n            return isNaN(result) ? 1 : result;\n        }\n\n        this.initialize = function () {\n            var initialScale,\n                element;\n\n            initialScale = readZoomParameter(parameters.zoom);\n\n            url = parameters.documentUrl;\n            document.title = parameters.title;\n            var documentName = document.getElementById('documentName');\n            documentName.innerHTML = \"\";\n            documentName.appendChild(documentName.ownerDocument.createTextNode(parameters.title));\n\n            viewerPlugin.onLoad = function () {\n                document.getElementById('pluginVersion').innerHTML = viewerPlugin.getPluginVersion();\n\n                if (viewerPlugin.isSlideshow()) {\n                    // Slideshow pages should be centered\n                    canvasContainer.classList.add(\"slideshow\");\n                    // Show page nav controls only for presentations\n                    pageSwitcher.style.visibility = 'visible';\n                } else {\n                    // For text documents, show the zoom widget.\n                    zoomWidget.style.visibility = 'visible';\n                    // Only show the page switcher widget if the plugin supports page numbers\n                    if (viewerPlugin.getPageInView) {\n                        pageSwitcher.style.visibility = 'visible';\n                    }\n                }\n\n                initialized = true;\n                pages = getPages();\n                document.getElementById('numPages').innerHTML = 'of ' + pages.length;\n\n\n                // Set default scale\n                parseScale(initialScale);\n\n\n                self.showPage(readStartPageParameter(parameters.startpage));\n\n                canvasContainer.onscroll = onScroll;\n                delayedRefresh();\n            };\n\n            viewerPlugin.initialize(canvasContainer, url);\n        };\n\n        /**\n         * Shows the 'n'th page. If n is larger than the page count,\n         * shows the last page. If n is less than 1, shows the first page.\n         * @return {undefined}\n         */\n        this.showPage = function (n) {\n            if (n <= 0) {\n                n = 1;\n            } else if (n > pages.length) {\n                n = pages.length;\n            }\n\n            viewerPlugin.showPage(n);\n\n            currentPage = n;\n            document.getElementById('pageNumber').value = currentPage;\n        };\n\n        /**\n         * Shows the next page. If there is no subsequent page, does nothing.\n         * @return {undefined}\n         */\n        this.showNextPage = function () {\n            self.showPage(currentPage + 1);\n        };\n\n        /**\n         * Shows the previous page. If there is no previous page, does nothing.\n         * @return {undefined}\n         */\n        this.showPreviousPage = function () {\n            self.showPage(currentPage - 1);\n        };\n\n        /**\n         * Attempts to 'download' the file.\n         * @return {undefined}\n         */\n        this.download = function () {\n            var documentUrl = url.split('#')[0];\n            documentUrl += '#viewer.action=download';\n            window.open(documentUrl, '_parent');\n        };\n\n        /**\n         * Toggles the fullscreen state of the viewer\n         * @return {undefined}\n         */\n        this.toggleFullScreen = function () {\n            var elem = viewerElement;\n            if (!isFullScreen) {\n                if (elem.requestFullscreen) {\n                    elem.requestFullscreen();\n                } else if (elem.mozRequestFullScreen) {\n                    elem.mozRequestFullScreen();\n                } else if (elem.webkitRequestFullscreen) {\n                    elem.webkitRequestFullscreen();\n                } else if (elem.webkitRequestFullScreen) {\n                    elem.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\n                } else if (elem.msRequestFullscreen) {\n                    elem.msRequestFullscreen();\n                }\n            } else {\n                if (document.exitFullscreen) {\n                    document.exitFullscreen();\n                } else if (document.cancelFullScreen) {\n                    document.cancelFullScreen();\n                } else if (document.mozCancelFullScreen) {\n                    document.mozCancelFullScreen();\n                } else if (document.webkitExitFullscreen) {\n                    document.webkitExitFullscreen();\n                } else if (document.webkitCancelFullScreen) {\n                    document.webkitCancelFullScreen();\n                } else if (document.msExitFullscreen) {\n                    document.msExitFullscreen();\n                }\n            }\n        };\n\n        /**\n         * Toggles the presentation mode of the viewer.\n         * Presentation mode involves fullscreen + hidden UI controls\n         */\n        this.togglePresentationMode = function () {\n            var overlayCloseButton = document.getElementById('overlayCloseButton');\n\n            if (!presentationMode) {\n                titlebar.style.display = toolbar.style.display = 'none';\n                overlayCloseButton.style.display = 'block';\n                canvasContainer.classList.add('presentationMode');\n                canvasContainer.onmousedown = function (event) {\n                    event.preventDefault();\n                };\n                canvasContainer.oncontextmenu = function (event) {\n                    event.preventDefault();\n                };\n                canvasContainer.onmouseup = function (event) {\n                    event.preventDefault();\n                    if (event.which === 1) {\n                        self.showNextPage();\n                    } else {\n                        self.showPreviousPage();\n                    }\n                };\n                parseScale('page-fit');\n            } else {\n                if (isBlankedOut()) {\n                    leaveBlankOut();\n                }\n                titlebar.style.display = toolbar.style.display = 'block';\n                overlayCloseButton.style.display = 'none';\n                canvasContainer.classList.remove('presentationMode');\n                canvasContainer.onmouseup = function () {};\n                canvasContainer.oncontextmenu = function () {};\n                canvasContainer.onmousedown = function () {};\n                parseScale('auto');\n            }\n\n            presentationMode = !presentationMode;\n        };\n\n        /**\n         * Gets the zoom level of the document\n         * @return {!number}\n         */\n        this.getZoomLevel = function () {\n            return viewerPlugin.getZoomLevel();\n        };\n\n        /**\n         * Set the zoom level of the document\n         * @param {!number} value\n         * @return {undefined}\n         */\n        this.setZoomLevel = function (value) {\n            viewerPlugin.setZoomLevel(value);\n        };\n\n        /**\n         * Zoom out by 10 %\n         * @return {undefined}\n         */\n        this.zoomOut = function () {\n            // 10 % decrement\n            var newScale = (self.getZoomLevel() / kDefaultScaleDelta).toFixed(2);\n            newScale = Math.max(kMinScale, newScale);\n            parseScale(newScale, true);\n        };\n\n        /**\n         * Zoom in by 10%\n         * @return {undefined}\n         */\n        this.zoomIn = function () {\n            // 10 % increment\n            var newScale = (self.getZoomLevel() * kDefaultScaleDelta).toFixed(2);\n            newScale = Math.min(kMaxScale, newScale);\n            parseScale(newScale, true);\n        };\n\n        function cancelPresentationMode() {\n            if (presentationMode && !isFullScreen) {\n                self.togglePresentationMode();\n            }\n        }\n\n        function handleFullScreenChange() {\n            isFullScreen = !isFullScreen;\n            cancelPresentationMode();\n        }\n\n        function showOverlayNavigator() {\n            if (presentationMode || viewerPlugin.isSlideshow()) {\n                overlayNavigator.className = 'viewer-touched';\n                window.clearTimeout(touchTimer);\n                touchTimer = window.setTimeout(function () {\n                    overlayNavigator.className = '';\n                }, UI_FADE_DURATION);\n            }\n        }\n\n        /**\n         * @param {!boolean} timed Fade after a while\n         */\n        function showToolbars() {\n            titlebar.classList.add('viewer-touched');\n            toolbar.classList.add('viewer-touched');\n            window.clearTimeout(toolbarTouchTimer);\n            toolbarTouchTimer = window.setTimeout(function () {\n                hideToolbars();\n            }, UI_FADE_DURATION);\n        }\n\n        function hideToolbars() {\n            titlebar.classList.remove('viewer-touched');\n            toolbar.classList.remove('viewer-touched');\n        }\n\n        function toggleToolbars() {\n            if (titlebar.classList.contains('viewer-touched')) {\n                hideToolbars();\n            } else {\n                showToolbars();\n            }\n        }\n\n        function blankOut(value) {\n            blanked.style.display = 'block';\n            blanked.style.backgroundColor = value;\n            hideToolbars();\n        }\n\n        function leaveBlankOut() {\n            blanked.style.display = 'none';\n            toggleToolbars();\n        }\n\n        function setButtonClickHandler(buttonId, handler) {\n            var button = document.getElementById(buttonId);\n\n            button.addEventListener('click', function () {\n                handler();\n                button.blur();\n            });\n        }\n\n        function init() {\n\n            initializeAboutInformation();\n\n            if (viewerPlugin) {\n                self.initialize();\n\n                if (!(document.exitFullscreen || document.cancelFullScreen || document.mozCancelFullScreen || document.webkitExitFullscreen || document.webkitCancelFullScreen || document.msExitFullscreen)) {\n                    document.getElementById('fullscreen').style.visibility = 'hidden';\n                    document.getElementById('presentation').style.visibility = 'hidden';\n                }\n\n                setButtonClickHandler('overlayCloseButton', self.toggleFullScreen);\n                setButtonClickHandler('fullscreen', self.toggleFullScreen);\n                setButtonClickHandler('presentation', function () {\n                    if (!isFullScreen) {\n                        self.toggleFullScreen();\n                    }\n                    self.togglePresentationMode();\n                });\n\n                document.addEventListener('fullscreenchange', handleFullScreenChange);\n                document.addEventListener('webkitfullscreenchange', handleFullScreenChange);\n                document.addEventListener('mozfullscreenchange', handleFullScreenChange);\n                document.addEventListener('MSFullscreenChange', handleFullScreenChange);\n\n                setButtonClickHandler('download', self.download);\n\n                setButtonClickHandler('zoomOut', self.zoomOut);\n                setButtonClickHandler('zoomIn', self.zoomIn);\n\n                setButtonClickHandler('previous', self.showPreviousPage);\n                setButtonClickHandler('next', self.showNextPage);\n\n                setButtonClickHandler('previousPage', self.showPreviousPage);\n                setButtonClickHandler('nextPage', self.showNextPage);\n\n                document.getElementById('pageNumber').addEventListener('change', function () {\n                    self.showPage(this.value);\n                });\n\n                document.getElementById('scaleSelect').addEventListener('change', function () {\n                    parseScale(this.value);\n                });\n\n                canvasContainer.addEventListener('click', showOverlayNavigator);\n                overlayNavigator.addEventListener('click', showOverlayNavigator);\n                canvasContainer.addEventListener('click', toggleToolbars);\n                titlebar.addEventListener('click', showToolbars);\n                toolbar.addEventListener('click', showToolbars);\n\n                window.addEventListener('scalechange', function (evt) {\n                    var customScaleOption = document.getElementById('customScaleOption'),\n                        predefinedValueFound = selectScaleOption(String(evt.scale));\n\n                    customScaleOption.selected = false;\n\n                    if (!predefinedValueFound) {\n                        customScaleOption.textContent = Math.round(evt.scale * 10000) / 100 + '%';\n                        customScaleOption.selected = true;\n                    }\n                }, true);\n\n                window.addEventListener('resize', function (evt) {\n                    if (initialized &&\n                              (document.getElementById('pageWidthOption').selected ||\n                              document.getElementById('pageAutoOption').selected)) {\n                        parseScale(document.getElementById('scaleSelect').value);\n                    }\n                    showOverlayNavigator();\n                });\n\n                window.addEventListener('keydown', function (evt) {\n                    var key = evt.keyCode,\n                        shiftKey = evt.shiftKey;\n\n                    // blanked-out mode?\n                    if (isBlankedOut()) {\n                        switch (key) {\n                        case 16: // Shift\n                        case 17: // Ctrl\n                        case 18: // Alt\n                        case 91: // LeftMeta\n                        case 93: // RightMeta\n                        case 224: // MetaInMozilla\n                        case 225: // AltGr\n                            // ignore modifier keys alone\n                            break;\n                        default:\n                            leaveBlankOut();\n                            break;\n                        }\n                    } else {\n                        switch (key) {\n                        case 8: // backspace\n                        case 33: // pageUp\n                        case 37: // left arrow\n                        case 38: // up arrow\n                        case 80: // key 'p'\n                            self.showPreviousPage();\n                            break;\n                        case 13: // enter\n                        case 34: // pageDown\n                        case 39: // right arrow\n                        case 40: // down arrow\n                        case 78: // key 'n'\n                            self.showNextPage();\n                            break;\n                        case 32: // space\n                            shiftKey ? self.showPreviousPage() : self.showNextPage();\n                            break;\n                        case 66:  // key 'b' blanks screen (to black) or returns to the document\n                        case 190: // and so does the key '.' (dot)\n                            if (presentationMode) {\n                                blankOut('#000');\n                            }\n                            break;\n                        case 87:  // key 'w' blanks page (to white) or returns to the document\n                        case 188: // and so does the key ',' (comma)\n                            if (presentationMode) {\n                                blankOut('#FFF');\n                            }\n                            break;\n                        case 36: // key 'Home' goes to first page\n                            self.showPage(1);\n                            break;\n                        case 35: // key 'End' goes to last page\n                            self.showPage(pages.length);\n                            break;\n                        }\n                    }\n                });\n            }\n        }\n\n        init();\n    }\n\n    return viewerjs.Viewer = Viewer;\n});\ndefine('skylark-viewerjs/ODFViewerPlugin',[\n    \"skylark-webodf\",\n    \"./viewerjs\"\n],function(webodf,viewerjs) {\n    function ODFViewerPlugin() {\n        \"use strict\";\n\n        function init(callback) {\n            /*\n            var lib = document.createElement('script'),\n                pluginCSS;\n\n            lib.async = false;\n            lib.src = './webodf.js';\n            lib.type = 'text/javascript';\n            lib.onload = function () {\n                runtime.loadClass('gui.HyperlinkClickHandler');\n                runtime.loadClass('odf.OdfCanvas');\n                runtime.loadClass('ops.Session');\n                runtime.loadClass('gui.CaretManager');\n                runtime.loadClass(\"gui.HyperlinkTooltipView\");\n                runtime.loadClass('gui.SessionController');\n                runtime.loadClass('gui.SvgSelectionView');\n                runtime.loadClass('gui.SelectionViewManager');\n                runtime.loadClass('gui.ShadowCursor');\n                runtime.loadClass('gui.SessionView');\n\n                callback();\n            };\n\n            document.head.appendChild(lib);\n            */\n            callback();\n        }\n\n        // that should probably be provided by webodf\n        function nsResolver(prefix) {\n            var ns = {\n                'draw' : \"urn:oasis:names:tc:opendocument:xmlns:drawing:1.0\",\n                'presentation' : \"urn:oasis:names:tc:opendocument:xmlns:presentation:1.0\",\n                'text' : \"urn:oasis:names:tc:opendocument:xmlns:text:1.0\",\n                'office' : \"urn:oasis:names:tc:opendocument:xmlns:office:1.0\"\n            };\n            return ns[prefix] || console.log('prefix [' + prefix + '] unknown.');\n        }\n\n        var self = this,\n            pluginName = \"WebODF\",\n            pluginURL = \"http://webodf.org\",\n            odfCanvas = null,\n            odfElement = null,\n            initialized = false,\n            root = null,\n            documentType = null,\n            pages = [],\n            currentPage = null;\n\n        this.initialize = function (viewerElement, documentUrl) {\n            // If the URL has a fragment (#...), try to load the file it represents\n            init(function () {\n                var session,\n                    sessionController,\n                    sessionView,\n                    odtDocument,\n                    shadowCursor,\n                    selectionViewManager,\n                    caretManager,\n                    localMemberId = 'localuser',\n                    hyperlinkTooltipView,\n                    eventManager;\n\n                odfElement = document.getElementById('canvas');\n                odfCanvas = new webodf.odf.OdfCanvas(odfElement);\n                odfCanvas.load(documentUrl);\n\n                odfCanvas.addListener('statereadychange', function () {\n                    root = odfCanvas.odfContainer().rootElement;\n                    initialized = true;\n                    documentType = odfCanvas.odfContainer().getDocumentType(root);\n                    if (documentType === 'text') {\n                        odfCanvas.enableAnnotations(true, false);\n\n                        session = new ops.Session(odfCanvas);\n                        odtDocument = session.getOdtDocument();\n                        shadowCursor = new gui.ShadowCursor(odtDocument);\n                        sessionController = new gui.SessionController(session, localMemberId, shadowCursor, {});\n                        eventManager = sessionController.getEventManager();\n                        caretManager = new gui.CaretManager(sessionController, odfCanvas.getViewport());\n                        selectionViewManager = new gui.SelectionViewManager(gui.SvgSelectionView);\n                        sessionView = new gui.SessionView({\n                            caretAvatarsInitiallyVisible: false\n                        }, localMemberId, session, sessionController.getSessionConstraints(), caretManager, selectionViewManager);\n                        selectionViewManager.registerCursor(shadowCursor);\n                        hyperlinkTooltipView = new gui.HyperlinkTooltipView(odfCanvas,\n                            sessionController.getHyperlinkClickHandler().getModifier);\n                        eventManager.subscribe(\"mousemove\", hyperlinkTooltipView.showTooltip);\n                        eventManager.subscribe(\"mouseout\", hyperlinkTooltipView.hideTooltip);\n\n                        var op = new ops.OpAddMember();\n                        op.init({\n                            memberid: localMemberId,\n                            setProperties: {\n                                fillName: webodf.runtime.tr(\"Unknown Author\"),\n                                color: \"blue\"\n                            }\n                        });\n                        session.enqueue([op]);\n                        sessionController.insertLocalCursor();\n                    }\n\n                    self.onLoad();\n                });\n            });\n        };\n\n        this.isSlideshow = function () {\n            return documentType === 'presentation';\n        };\n\n        this.onLoad = function () {};\n\n        this.fitToWidth = function (width) {\n            odfCanvas.fitToWidth(width);\n        };\n\n        this.fitToHeight = function (height) {\n            odfCanvas.fitToHeight(height);\n        };\n\n        this.fitToPage = function (width, height) {\n            odfCanvas.fitToContainingElement(width, height);\n        };\n\n        this.fitSmart = function (width) {\n            odfCanvas.fitSmart(width);\n        };\n\n        this.getZoomLevel = function () {\n            return odfCanvas.getZoomLevel();\n        };\n\n        this.setZoomLevel = function (value) {\n            odfCanvas.setZoomLevel(value);\n        };\n\n        // return a list of tuples (pagename, pagenode)\n        this.getPages = function () {\n            var pageNodes = Array.prototype.slice.call(root.getElementsByTagNameNS(nsResolver('draw'), 'page')),\n                pages  = [],\n                i,\n                tuple;\n\n            for (i = 0; i < pageNodes.length; i += 1) {\n                tuple = [\n                    pageNodes[i].getAttribute('draw:name'),\n                    pageNodes[i]\n                ];\n                pages.push(tuple);\n            }\n            return pages;\n        };\n\n        this.showPage = function (n) {\n            odfCanvas.showPage(n);\n        };\n\n        this.getPluginName = function () {\n            return pluginName;\n        };\n\n        this.getPluginVersion = function () {\n            var version;\n\n            if (String(typeof webodf) !== \"undefined\") {\n                version = webodf.Version;\n            } else {\n                version = \"Unknown\";\n            }\n\n            return version;\n        };\n\n        this.getPluginURL = function () {\n            return pluginURL;\n        };\n    }\n\n    return viewerjs.ODFViewerPlugin = ODFViewerPlugin;\n});\n\n\n\ndefine('skylark-viewerjs/ui_utils',[\n    \"./viewerjs\"\n],function(viewerjs) {\n  'use strict';\n\n  var CSS_UNITS = 96.0 / 72.0;\n  var DEFAULT_SCALE = 'auto';\n  var UNKNOWN_SCALE = 0;\n  var MAX_AUTO_SCALE = 1.25;\n  var SCROLLBAR_PADDING = 40;\n  var VERTICAL_PADDING = 5;\n\n  // optimised CSS custom property getter/setter\n  var CustomStyle = (function CustomStyleClosure() {\n\n    // As noted on: http://www.zachstronaut.com/posts/2009/02/17/\n    //              animate-css-transforms-firefox-webkit.html\n    // in some versions of IE9 it is critical that ms appear in this list\n    // before Moz\n    var prefixes = ['ms', 'Moz', 'Webkit', 'O'];\n    var _cache = {};\n\n    function CustomStyle() {}\n\n    CustomStyle.getProp = function get(propName, element) {\n      // check cache only when no element is given\n      if (arguments.length === 1 && typeof _cache[propName] === 'string') {\n        return _cache[propName];\n      }\n\n      element = element || document.documentElement;\n      var style = element.style, prefixed, uPropName;\n\n      // test standard property first\n      if (typeof style[propName] === 'string') {\n        return (_cache[propName] = propName);\n      }\n\n      // capitalize\n      uPropName = propName.charAt(0).toUpperCase() + propName.slice(1);\n\n      // test vendor specific properties\n      for (var i = 0, l = prefixes.length; i < l; i++) {\n        prefixed = prefixes[i] + uPropName;\n        if (typeof style[prefixed] === 'string') {\n          return (_cache[propName] = prefixed);\n        }\n      }\n\n      //if all fails then set to undefined\n      return (_cache[propName] = 'undefined');\n    };\n\n    CustomStyle.setProp = function set(propName, element, str) {\n      var prop = this.getProp(propName);\n      if (prop !== 'undefined') {\n        element.style[prop] = str;\n      }\n    };\n\n    return CustomStyle;\n  })();\n\n  function getFileName(url) {\n    var anchor = url.indexOf('#');\n    var query = url.indexOf('?');\n    var end = Math.min(\n      anchor > 0 ? anchor : url.length,\n      query > 0 ? query : url.length);\n    return url.substring(url.lastIndexOf('/', end) + 1, end);\n  }\n\n  /**\n   * Returns scale factor for the canvas. It makes sense for the HiDPI displays.\n   * @return {Object} The object with horizontal (sx) and vertical (sy)\n                      scales. The scaled property is set to false if scaling is\n                      not required, true otherwise.\n   */\n  function getOutputScale(ctx) {\n    var devicePixelRatio = window.devicePixelRatio || 1;\n    var backingStoreRatio = ctx.webkitBackingStorePixelRatio ||\n                            ctx.mozBackingStorePixelRatio ||\n                            ctx.msBackingStorePixelRatio ||\n                            ctx.oBackingStorePixelRatio ||\n                            ctx.backingStorePixelRatio || 1;\n    var pixelRatio = devicePixelRatio / backingStoreRatio;\n    return {\n      sx: pixelRatio,\n      sy: pixelRatio,\n      scaled: pixelRatio !== 1\n    };\n  }\n\n  /**\n   * Scrolls specified element into view of its parent.\n   * element {Object} The element to be visible.\n   * spot {Object} An object with optional top and left properties,\n   *               specifying the offset from the top left edge.\n   */\n  function scrollIntoView(element, spot) {\n    // Assuming offsetParent is available (it's not available when viewer is in\n    // hidden iframe or object). We have to scroll: if the offsetParent is not set\n    // producing the error. See also animationStartedClosure.\n    var parent = element.offsetParent;\n    var offsetY = element.offsetTop + element.clientTop;\n    var offsetX = element.offsetLeft + element.clientLeft;\n    if (!parent) {\n      console.error('offsetParent is not set -- cannot scroll');\n      return;\n    }\n    while (parent.clientHeight === parent.scrollHeight) {\n      if (parent.dataset._scaleY) {\n        offsetY /= parent.dataset._scaleY;\n        offsetX /= parent.dataset._scaleX;\n      }\n      offsetY += parent.offsetTop;\n      offsetX += parent.offsetLeft;\n      parent = parent.offsetParent;\n      if (!parent) {\n        return; // no need to scroll\n      }\n    }\n    if (spot) {\n      if (spot.top !== undefined) {\n        offsetY += spot.top;\n      }\n      if (spot.left !== undefined) {\n        offsetX += spot.left;\n        parent.scrollLeft = offsetX;\n      }\n    }\n    parent.scrollTop = offsetY;\n  }\n\n  /**\n   * Helper function to start monitoring the scroll event and converting them into\n   * PDF.js friendly one: with scroll debounce and scroll direction.\n   */\n  function watchScroll(viewAreaElement, callback) {\n    var debounceScroll = function debounceScroll(evt) {\n      if (rAF) {\n        return;\n      }\n      // schedule an invocation of scroll for next animation frame.\n      rAF = window.requestAnimationFrame(function viewAreaElementScrolled() {\n        rAF = null;\n\n        var currentY = viewAreaElement.scrollTop;\n        var lastY = state.lastY;\n        if (currentY !== lastY) {\n          state.down = currentY > lastY;\n        }\n        state.lastY = currentY;\n        callback(state);\n      });\n    };\n\n    var state = {\n      down: true,\n      lastY: viewAreaElement.scrollTop,\n      _eventHandler: debounceScroll\n    };\n\n    var rAF = null;\n    viewAreaElement.addEventListener('scroll', debounceScroll, true);\n    return state;\n  }\n\n  /**\n   * Use binary search to find the index of the first item in a given array which\n   * passes a given condition. The items are expected to be sorted in the sense\n   * that if the condition is true for one item in the array, then it is also true\n   * for all following items.\n   *\n   * @returns {Number} Index of the first array element to pass the test,\n   *                   or |items.length| if no such element exists.\n   */\n  function binarySearchFirstItem(items, condition) {\n    var minIndex = 0;\n    var maxIndex = items.length - 1;\n\n    if (items.length === 0 || !condition(items[maxIndex])) {\n      return items.length;\n    }\n    if (condition(items[minIndex])) {\n      return minIndex;\n    }\n\n    while (minIndex < maxIndex) {\n      var currentIndex = (minIndex + maxIndex) >> 1;\n      var currentItem = items[currentIndex];\n      if (condition(currentItem)) {\n        maxIndex = currentIndex;\n      } else {\n        minIndex = currentIndex + 1;\n      }\n    }\n    return minIndex; /* === maxIndex */\n  }\n\n  /**\n   * Generic helper to find out what elements are visible within a scroll pane.\n   */\n  function getVisibleElements(scrollEl, views, sortByVisibility) {\n    var top = scrollEl.scrollTop, bottom = top + scrollEl.clientHeight;\n    var left = scrollEl.scrollLeft, right = left + scrollEl.clientWidth;\n\n    function isElementBottomBelowViewTop(view) {\n      var element = view.div;\n      var elementBottom =\n        element.offsetTop + element.clientTop + element.clientHeight;\n      return elementBottom > top;\n    }\n\n    var visible = [], view, element;\n    var currentHeight, viewHeight, hiddenHeight, percentHeight;\n    var currentWidth, viewWidth;\n    var firstVisibleElementInd = (views.length === 0) ? 0 :\n      binarySearchFirstItem(views, isElementBottomBelowViewTop);\n\n    for (var i = firstVisibleElementInd, ii = views.length; i < ii; i++) {\n      view = views[i];\n      element = view.div;\n      currentHeight = element.offsetTop + element.clientTop;\n      viewHeight = element.clientHeight;\n\n      if (currentHeight > bottom) {\n        break;\n      }\n\n      currentWidth = element.offsetLeft + element.clientLeft;\n      viewWidth = element.clientWidth;\n      if (currentWidth + viewWidth < left || currentWidth > right) {\n        continue;\n      }\n      hiddenHeight = Math.max(0, top - currentHeight) +\n        Math.max(0, currentHeight + viewHeight - bottom);\n      percentHeight = ((viewHeight - hiddenHeight) * 100 / viewHeight) | 0;\n\n      visible.push({\n        id: view.id,\n        x: currentWidth,\n        y: currentHeight,\n        view: view,\n        percent: percentHeight\n      });\n    }\n\n    var first = visible[0];\n    var last = visible[visible.length - 1];\n\n    if (sortByVisibility) {\n      visible.sort(function(a, b) {\n        var pc = a.percent - b.percent;\n        if (Math.abs(pc) > 0.001) {\n          return -pc;\n        }\n        return a.id - b.id; // ensure stability\n      });\n    }\n    return {first: first, last: last, views: visible};\n  }\n\n  /**\n   * Event handler to suppress context menu.\n   */\n  function noContextMenuHandler(e) {\n    e.preventDefault();\n  }\n\n  /**\n   * Returns the filename or guessed filename from the url (see issue 3455).\n   * url {String} The original PDF location.\n   * @return {String} Guessed PDF file name.\n   */\n  function getPDFFileNameFromURL(url) {\n    var reURI = /^(?:([^:]+:)?\\/\\/[^\\/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n    //            SCHEME      HOST         1.PATH  2.QUERY   3.REF\n    // Pattern to get last matching NAME.pdf\n    var reFilename = /[^\\/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n    var splitURI = reURI.exec(url);\n    var suggestedFilename = reFilename.exec(splitURI[1]) ||\n                             reFilename.exec(splitURI[2]) ||\n                             reFilename.exec(splitURI[3]);\n    if (suggestedFilename) {\n      suggestedFilename = suggestedFilename[0];\n      if (suggestedFilename.indexOf('%') !== -1) {\n        // URL-encoded %2Fpath%2Fto%2Ffile.pdf should be file.pdf\n        try {\n          suggestedFilename =\n            reFilename.exec(decodeURIComponent(suggestedFilename))[0];\n        } catch(e) { // Possible (extremely rare) errors:\n          // URIError \"Malformed URI\", e.g. for \"%AA.pdf\"\n          // TypeError \"null has no properties\", e.g. for \"%2F.pdf\"\n        }\n      }\n    }\n    return suggestedFilename || 'document.pdf';\n  }\n\n  var ProgressBar = (function ProgressBarClosure() {\n\n    function clamp(v, min, max) {\n      return Math.min(Math.max(v, min), max);\n    }\n\n    function ProgressBar(id, opts) {\n      this.visible = true;\n\n      // Fetch the sub-elements for later.\n      this.div = document.querySelector(id + ' .progress');\n\n      // Get the loading bar element, so it can be resized to fit the viewer.\n      this.bar = this.div.parentNode;\n\n      // Get options, with sensible defaults.\n      this.height = opts.height || 100;\n      this.width = opts.width || 100;\n      this.units = opts.units || '%';\n\n      // Initialize heights.\n      this.div.style.height = this.height + this.units;\n      this.percent = 0;\n    }\n\n    ProgressBar.prototype = {\n\n      updateBar: function ProgressBar_updateBar() {\n        if (this._indeterminate) {\n          this.div.classList.add('indeterminate');\n          this.div.style.width = this.width + this.units;\n          return;\n        }\n\n        this.div.classList.remove('indeterminate');\n        var progressSize = this.width * this._percent / 100;\n        this.div.style.width = progressSize + this.units;\n      },\n\n      get percent() {\n        return this._percent;\n      },\n\n      set percent(val) {\n        this._indeterminate = isNaN(val);\n        this._percent = clamp(val, 0, 100);\n        this.updateBar();\n      },\n\n      setWidth: function ProgressBar_setWidth(viewer) {\n        if (viewer) {\n          var container = viewer.parentNode;\n          var scrollbarWidth = container.offsetWidth - viewer.offsetWidth;\n          if (scrollbarWidth > 0) {\n            this.bar.setAttribute('style', 'width: calc(100% - ' +\n                                           scrollbarWidth + 'px);');\n          }\n        }\n      },\n\n      hide: function ProgressBar_hide() {\n        if (!this.visible) {\n          return;\n        }\n        this.visible = false;\n        this.bar.classList.add('hidden');\n        document.body.classList.remove('loadingInProgress');\n      },\n\n      show: function ProgressBar_show() {\n        if (this.visible) {\n          return;\n        }\n        this.visible = true;\n        document.body.classList.add('loadingInProgress');\n        this.bar.classList.remove('hidden');\n      }\n    };\n\n    return ProgressBar;\n  })();\n\n  return viewerjs.uiutils = {\n    CustomStyle,\n    getFileName,\n    getOutputScale,\n    scrollIntoView,\n    watchScroll,\n    binarySearchFirstItem,\n    getVisibleElements,\n    getPDFFileNameFromURL,\n    ProgressBar\n  };\n});\ndefine('skylark-viewerjs/text_layer_builder',[\n    \"skylark-pdfjs-display\",\n    \"./viewerjs\",\n    \"./ui_utils\"\n],function(PDFJS,viewerjs,uiutils) {\n  'use strict';\n\n  var MAX_TEXT_DIVS_TO_RENDER = 100000;\n\n  var NonWhitespaceRegexp = /\\S/;\n\n  function isAllWhitespace(str) {\n    return !NonWhitespaceRegexp.test(str);\n  }\n\n  /**\n   * @typedef {Object} TextLayerBuilderOptions\n   * @property {HTMLDivElement} textLayerDiv - The text layer container.\n   * @property {number} pageIndex - The page index.\n   * @property {PageViewport} viewport - The viewport of the text layer.\n   * @property {PDFFindController} findController\n   */\n\n  /**\n   * TextLayerBuilder provides text-selection functionality for the PDF.\n   * It does this by creating overlay divs over the PDF text. These divs\n   * contain text that matches the PDF text they are overlaying. This object\n   * also provides a way to highlight text that is being searched for.\n   * @class\n   */\n  function TextLayerBuilder(options) {\n    this.textLayerDiv = options.textLayerDiv;\n    this.renderingDone = false;\n    this.divContentDone = false;\n    this.pageIdx = options.pageIndex;\n    this.pageNumber = this.pageIdx + 1;\n    this.matches = [];\n    this.viewport = options.viewport;\n    this.textDivs = [];\n    this.findController = options.findController || null;\n  }\n\n  TextLayerBuilder.prototype = {\n    _finishRendering: function TextLayerBuilder_finishRendering() {\n      this.renderingDone = true;\n\n      var event = document.createEvent('CustomEvent');\n      event.initCustomEvent('textlayerrendered', true, true, {\n        pageNumber: this.pageNumber\n      });\n      this.textLayerDiv.dispatchEvent(event);\n    },\n\n    renderLayer: function TextLayerBuilder_renderLayer() {\n      var textLayerFrag = document.createDocumentFragment();\n      var textDivs = this.textDivs;\n      var textDivsLength = textDivs.length;\n      var canvas = document.createElement('canvas');\n      var ctx = canvas.getContext('2d');\n\n      // No point in rendering many divs as it would make the browser\n      // unusable even after the divs are rendered.\n      if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n        this._finishRendering();\n        return;\n      }\n\n      var lastFontSize;\n      var lastFontFamily;\n      for (var i = 0; i < textDivsLength; i++) {\n        var textDiv = textDivs[i];\n        if (textDiv.dataset.isWhitespace !== undefined) {\n          continue;\n        }\n\n        var fontSize = textDiv.style.fontSize;\n        var fontFamily = textDiv.style.fontFamily;\n\n        // Only build font string and set to context if different from last.\n        if (fontSize !== lastFontSize || fontFamily !== lastFontFamily) {\n          ctx.font = fontSize + ' ' + fontFamily;\n          lastFontSize = fontSize;\n          lastFontFamily = fontFamily;\n        }\n\n        var width = ctx.measureText(textDiv.textContent).width;\n        if (width > 0) {\n          textLayerFrag.appendChild(textDiv);\n          var transform;\n          if (textDiv.dataset.canvasWidth !== undefined) {\n            // Dataset values come of type string.\n            var textScale = textDiv.dataset.canvasWidth / width;\n            transform = 'scaleX(' + textScale + ')';\n          } else {\n            transform = '';\n          }\n          var rotation = textDiv.dataset.angle;\n          if (rotation) {\n            transform = 'rotate(' + rotation + 'deg) ' + transform;\n          }\n          if (transform) {\n            uiutils.CustomStyle.setProp('transform' , textDiv, transform);\n          }\n        }\n      }\n\n      this.textLayerDiv.appendChild(textLayerFrag);\n      this._finishRendering();\n      this.updateMatches();\n    },\n\n    /**\n     * Renders the text layer.\n     * @param {number} timeout (optional) if specified, the rendering waits\n     *   for specified amount of ms.\n     */\n    render: function TextLayerBuilder_render(timeout) {\n      if (!this.divContentDone || this.renderingDone) {\n        return;\n      }\n\n      if (this.renderTimer) {\n        clearTimeout(this.renderTimer);\n        this.renderTimer = null;\n      }\n\n      if (!timeout) { // Render right away\n        this.renderLayer();\n      } else { // Schedule\n        var self = this;\n        this.renderTimer = setTimeout(function() {\n          self.renderLayer();\n          self.renderTimer = null;\n        }, timeout);\n      }\n    },\n\n    appendText: function TextLayerBuilder_appendText(geom, styles) {\n      var style = styles[geom.fontName];\n      var textDiv = document.createElement('div');\n      this.textDivs.push(textDiv);\n      if (isAllWhitespace(geom.str)) {\n        textDiv.dataset.isWhitespace = true;\n        return;\n      }\n      var tx = PDFJS.Util.transform(this.viewport.transform, geom.transform);\n      var angle = Math.atan2(tx[1], tx[0]);\n      if (style.vertical) {\n        angle += Math.PI / 2;\n      }\n      var fontHeight = Math.sqrt((tx[2] * tx[2]) + (tx[3] * tx[3]));\n      var fontAscent = fontHeight;\n      if (style.ascent) {\n        fontAscent = style.ascent * fontAscent;\n      } else if (style.descent) {\n        fontAscent = (1 + style.descent) * fontAscent;\n      }\n\n      var left;\n      var top;\n      if (angle === 0) {\n        left = tx[4];\n        top = tx[5] - fontAscent;\n      } else {\n        left = tx[4] + (fontAscent * Math.sin(angle));\n        top = tx[5] - (fontAscent * Math.cos(angle));\n      }\n      textDiv.style.left = left + 'px';\n      textDiv.style.top = top + 'px';\n      textDiv.style.fontSize = fontHeight + 'px';\n      textDiv.style.fontFamily = style.fontFamily;\n\n      textDiv.textContent = geom.str;\n      // |fontName| is only used by the Font Inspector. This test will succeed\n      // when e.g. the Font Inspector is off but the Stepper is on, but it's\n      // not worth the effort to do a more accurate test.\n      if (PDFJS.pdfBug) {\n        textDiv.dataset.fontName = geom.fontName;\n      }\n      // Storing into dataset will convert number into string.\n      if (angle !== 0) {\n        textDiv.dataset.angle = angle * (180 / Math.PI);\n      }\n      // We don't bother scaling single-char text divs, because it has very\n      // little effect on text highlighting. This makes scrolling on docs with\n      // lots of such divs a lot faster.\n      if (textDiv.textContent.length > 1) {\n        if (style.vertical) {\n          textDiv.dataset.canvasWidth = geom.height * this.viewport.scale;\n        } else {\n          textDiv.dataset.canvasWidth = geom.width * this.viewport.scale;\n        }\n      }\n    },\n\n    setTextContent: function TextLayerBuilder_setTextContent(textContent) {\n      this.textContent = textContent;\n\n      var textItems = textContent.items;\n      for (var i = 0, len = textItems.length; i < len; i++) {\n        this.appendText(textItems[i], textContent.styles);\n      }\n      this.divContentDone = true;\n    },\n\n    convertMatches: function TextLayerBuilder_convertMatches(matches) {\n      var i = 0;\n      var iIndex = 0;\n      var bidiTexts = this.textContent.items;\n      var end = bidiTexts.length - 1;\n      var queryLen = (this.findController === null ?\n                      0 : this.findController.state.query.length);\n      var ret = [];\n\n      for (var m = 0, len = matches.length; m < len; m++) {\n        // Calculate the start position.\n        var matchIdx = matches[m];\n\n        // Loop over the divIdxs.\n        while (i !== end && matchIdx >= (iIndex + bidiTexts[i].str.length)) {\n          iIndex += bidiTexts[i].str.length;\n          i++;\n        }\n\n        if (i === bidiTexts.length) {\n          console.error('Could not find a matching mapping');\n        }\n\n        var match = {\n          begin: {\n            divIdx: i,\n            offset: matchIdx - iIndex\n          }\n        };\n\n        // Calculate the end position.\n        matchIdx += queryLen;\n\n        // Somewhat the same array as above, but use > instead of >= to get\n        // the end position right.\n        while (i !== end && matchIdx > (iIndex + bidiTexts[i].str.length)) {\n          iIndex += bidiTexts[i].str.length;\n          i++;\n        }\n\n        match.end = {\n          divIdx: i,\n          offset: matchIdx - iIndex\n        };\n        ret.push(match);\n      }\n\n      return ret;\n    },\n\n    renderMatches: function TextLayerBuilder_renderMatches(matches) {\n      // Early exit if there is nothing to render.\n      if (matches.length === 0) {\n        return;\n      }\n\n      var bidiTexts = this.textContent.items;\n      var textDivs = this.textDivs;\n      var prevEnd = null;\n      var pageIdx = this.pageIdx;\n      var isSelectedPage = (this.findController === null ?\n        false : (pageIdx === this.findController.selected.pageIdx));\n      var selectedMatchIdx = (this.findController === null ?\n                              -1 : this.findController.selected.matchIdx);\n      var highlightAll = (this.findController === null ?\n                          false : this.findController.state.highlightAll);\n      var infinity = {\n        divIdx: -1,\n        offset: undefined\n      };\n\n      function beginText(begin, className) {\n        var divIdx = begin.divIdx;\n        textDivs[divIdx].textContent = '';\n        appendTextToDiv(divIdx, 0, begin.offset, className);\n      }\n\n      function appendTextToDiv(divIdx, fromOffset, toOffset, className) {\n        var div = textDivs[divIdx];\n        var content = bidiTexts[divIdx].str.substring(fromOffset, toOffset);\n        var node = document.createTextNode(content);\n        if (className) {\n          var span = document.createElement('span');\n          span.className = className;\n          span.appendChild(node);\n          div.appendChild(span);\n          return;\n        }\n        div.appendChild(node);\n      }\n\n      var i0 = selectedMatchIdx, i1 = i0 + 1;\n      if (highlightAll) {\n        i0 = 0;\n        i1 = matches.length;\n      } else if (!isSelectedPage) {\n        // Not highlighting all and this isn't the selected page, so do nothing.\n        return;\n      }\n\n      for (var i = i0; i < i1; i++) {\n        var match = matches[i];\n        var begin = match.begin;\n        var end = match.end;\n        var isSelected = (isSelectedPage && i === selectedMatchIdx);\n        var highlightSuffix = (isSelected ? ' selected' : '');\n\n        if (this.findController) {\n          this.findController.updateMatchPosition(pageIdx, i, textDivs,\n                                                  begin.divIdx, end.divIdx);\n        }\n\n        // Match inside new div.\n        if (!prevEnd || begin.divIdx !== prevEnd.divIdx) {\n          // If there was a previous div, then add the text at the end.\n          if (prevEnd !== null) {\n            appendTextToDiv(prevEnd.divIdx, prevEnd.offset, infinity.offset);\n          }\n          // Clear the divs and set the content until the starting point.\n          beginText(begin);\n        } else {\n          appendTextToDiv(prevEnd.divIdx, prevEnd.offset, begin.offset);\n        }\n\n        if (begin.divIdx === end.divIdx) {\n          appendTextToDiv(begin.divIdx, begin.offset, end.offset,\n                          'highlight' + highlightSuffix);\n        } else {\n          appendTextToDiv(begin.divIdx, begin.offset, infinity.offset,\n                          'highlight begin' + highlightSuffix);\n          for (var n0 = begin.divIdx + 1, n1 = end.divIdx; n0 < n1; n0++) {\n            textDivs[n0].className = 'highlight middle' + highlightSuffix;\n          }\n          beginText(end, 'highlight end' + highlightSuffix);\n        }\n        prevEnd = end;\n      }\n\n      if (prevEnd) {\n        appendTextToDiv(prevEnd.divIdx, prevEnd.offset, infinity.offset);\n      }\n    },\n\n    updateMatches: function TextLayerBuilder_updateMatches() {\n      // Only show matches when all rendering is done.\n      if (!this.renderingDone) {\n        return;\n      }\n\n      // Clear all matches.\n      var matches = this.matches;\n      var textDivs = this.textDivs;\n      var bidiTexts = this.textContent.items;\n      var clearedUntilDivIdx = -1;\n\n      // Clear all current matches.\n      for (var i = 0, len = matches.length; i < len; i++) {\n        var match = matches[i];\n        var begin = Math.max(clearedUntilDivIdx, match.begin.divIdx);\n        for (var n = begin, end = match.end.divIdx; n <= end; n++) {\n          var div = textDivs[n];\n          div.textContent = bidiTexts[n].str;\n          div.className = '';\n        }\n        clearedUntilDivIdx = match.end.divIdx + 1;\n      }\n\n      if (this.findController === null || !this.findController.active) {\n        return;\n      }\n\n      // Convert the matches on the page controller into the match format\n      // used for the textLayer.\n      this.matches = this.convertMatches(this.findController === null ?\n        [] : (this.findController.pageMatches[this.pageIdx] || []));\n      this.renderMatches(this.matches);\n    }\n  };\n\n  /**\n   * @constructor\n   * @implements IPDFTextLayerFactory\n   */\n  function DefaultTextLayerFactory() {}\n  DefaultTextLayerFactory.prototype = {\n    /**\n     * @param {HTMLDivElement} textLayerDiv\n     * @param {number} pageIndex\n     * @param {PageViewport} viewport\n     * @returns {TextLayerBuilder}\n     */\n    createTextLayerBuilder: function (textLayerDiv, pageIndex, viewport) {\n      return new TextLayerBuilder({\n        textLayerDiv: textLayerDiv,\n        pageIndex: pageIndex,\n        viewport: viewport\n      });\n    }\n  };\n\n  TextLayerBuilder.DefaultTextLayerFactory = DefaultTextLayerFactory;\n\n  return viewerjs.TextLayerBuilder = TextLayerBuilder\n});\ndefine('skylark-viewerjs/PDFViewerPlugin',[\n    \"skylark-pdfjs-display\",\n    \"./viewerjs\",\n    \"./ui_utils\",\n    \"./text_layer_builder\"\n],function(PDFJS,viewerjs,uiutils,TextLayerBuilder) {\n    function PDFViewerPlugin() {\n        \"use strict\";\n\n        function loadScript(path, callback) {\n            var script = document.createElement('script');\n            script.async = false;\n            script.src = path;\n            script.type = 'text/javascript';\n            script.onload = callback || script.onload;\n            document.getElementsByTagName('head')[0].appendChild(script);\n        }\n\n        function init(callback) {\n            var pluginCSS;\n\n            /*\n            loadScript('./compatibility.js', function () {\n                loadScript('./pdf.js');\n                loadScript('./ui_utils.js');\n                loadScript('./text_layer_builder.js');\n                loadScript('./pdfjsversion.js', callback);\n            });\n            */\n            callback();\n\n        }\n\n        var self = this,\n            pages = [],\n            domPages = [],\n            pageText = [],\n            renderingStates = [],\n            RENDERING = {\n                BLANK: 0,\n                RUNNING: 1,\n                FINISHED: 2,\n                RUNNINGOUTDATED: 3\n            },\n            TEXT_LAYER_RENDER_DELAY = 200, // ms\n            container = null,\n            pdfDocument = null,\n            pageViewScroll = null,\n            isGuessedSlideshow = true, // assume true as default, any non-matching page will unset this\n            isPresentationMode = false,\n            scale = 1,\n            currentPage = 1,\n            maxPageWidth = 0,\n            maxPageHeight = 0,\n            createdPageCount = 0;\n\n        function scrollIntoView(elem) {\n            elem.parentNode.scrollTop = elem.offsetTop;\n        }\n\n        function isScrolledIntoView(elem) {\n            if (elem.style.display === \"none\") {\n                return false;\n            }\n\n            var docViewTop = container.scrollTop,\n                docViewBottom = docViewTop + container.clientHeight,\n                elemTop = elem.offsetTop,\n                elemBottom = elemTop + elem.clientHeight;\n\n            // Is in view if either the top or the bottom of the page is between the\n            // document viewport bounds,\n            // or if the top is above the viewport and the bottom is below it.\n            return (elemTop >= docViewTop && elemTop < docViewBottom)\n                    || (elemBottom >= docViewTop && elemBottom < docViewBottom)\n                    || (elemTop < docViewTop && elemBottom >= docViewBottom);\n        }\n\n        function getDomPage(page) {\n            return domPages[page.pageNumber-1]; //modified by lwf for new pdf version\n        }\n        function getPageText(page) {\n            return pageText[page.pageNumber-1];//modified by lwf for new pdf version\n        }\n        function getRenderingStatus(page) {\n            return renderingStates[page.pageNumber-1];//modified by lwf for new pdf version\n        }\n        function setRenderingStatus(page, renderStatus) {\n            renderingStates[page.pageNumber-1] = renderStatus;//modified by lwf for new pdf version\n        }\n\n        function updatePageDimensions(page, width, height) {\n            var domPage = getDomPage(page),\n                canvas = domPage.getElementsByTagName('canvas')[0],\n                textLayer = domPage.getElementsByTagName('div')[0],\n                cssScale = 'scale(' + scale + ', ' + scale + ')';\n\n            domPage.style.width = width + \"px\";\n            domPage.style.height = height + \"px\";\n\n            canvas.width = width;\n            canvas.height = height;\n            canvas.style.width = width + \"px\";\n            canvas.style.height = height + \"px\";\n\n\n            textLayer.style.width = width + \"px\";\n            textLayer.style.height = height + \"px\";\n\n            uiutils.CustomStyle.setProp('transform', textLayer, cssScale);\n            uiutils.CustomStyle.setProp('transformOrigin', textLayer, '0% 0%');\n\n            if (getRenderingStatus(page) === RENDERING.RUNNING) {\n                // TODO: should be able to cancel that rendering\n                setRenderingStatus(page, RENDERING.RUNNINGOUTDATED);\n            } else {\n                // Once the page dimension is updated, the rendering state is blank.\n                setRenderingStatus(page, RENDERING.BLANK);\n            }\n        }\n\n        function ensurePageRendered(page) {\n            var domPage, textLayer, canvas;\n\n            if (getRenderingStatus(page) === RENDERING.BLANK) {\n                setRenderingStatus(page, RENDERING.RUNNING);\n\n                domPage = getDomPage(page);\n                textLayer = getPageText(page);\n                canvas = domPage.getElementsByTagName('canvas')[0];\n\n                page.render({\n                    canvasContext: canvas.getContext('2d'),\n                    textLayer: textLayer,\n                    viewport: page.getViewport({scale}) //modified by lwf for new pdf version\n                }).promise.then(function () {\n                    /*\n                    if (getRenderingStatus(page) === RENDERING.RUNNINGOUTDATED) {\n                        // restart\n                        setRenderingStatus(page, RENDERING.BLANK);\n                        ensurePageRendered(page);\n                    } else {\n                        setRenderingStatus(page, RENDERING.FINISHED);\n                    }\n                    */\n                });\n            }\n        }\n\n        function completeLoading() {\n            var allPagesVisible = !self.isSlideshow();\n            domPages.forEach(function (domPage) {\n                if (allPagesVisible) {\n                    domPage.style.display = \"block\";\n                }\n                container.appendChild(domPage);\n            });\n\n            self.onLoad();\n            self.showPage(1);\n        }\n\n        function createPage(page) {\n            var pageNumber,\n                textLayerDiv,\n                textLayer,\n                canvas,\n                domPage,\n                viewport;\n\n            pageNumber = page.pageNumber; // page.pageIndex + 1; modified by lwf for new pdf version\n\n            viewport = page.getViewport({scale});//viewport = page.getViewport(scale);modified by lwf for new pdf version\n\n            domPage = document.createElement('div');\n            domPage.id = 'pageContainer' + pageNumber;\n            domPage.className = 'page';\n            domPage.style.display = \"none\";\n\n            canvas = document.createElement('canvas');\n            canvas.id = 'canvas' + pageNumber;\n\n            textLayerDiv = document.createElement('div');\n            textLayerDiv.className = 'textLayer';\n            textLayerDiv.id = 'textLayer' + pageNumber;\n\n            domPage.appendChild(canvas);\n            domPage.appendChild(textLayerDiv);\n\n            pages[page.pageNumber-1] = page; //modified by lwf for new pdf version\n            domPages[page.pageNumber-1] = domPage; //modified by lwf for new pdf version\n            renderingStates[page.pageNumber-1] = RENDERING.BLANK;\n\n            updatePageDimensions(page, viewport.width, viewport.height);\n            if (maxPageWidth < viewport.width) {\n                maxPageWidth = viewport.width;\n            }\n            if (maxPageHeight < viewport.height) {\n                maxPageHeight = viewport.height;\n            }\n            // A very simple but generally true guess - if any page has the height greater than the width, treat it no longer as a slideshow\n            if (viewport.width < viewport.height) {\n                isGuessedSlideshow = false;\n            }\n\n            textLayer = new TextLayerBuilder({\n                textLayerDiv: textLayerDiv,\n                viewport: viewport,\n                pageIndex: pageNumber - 1\n            });\n            page.getTextContent().then(function (textContent) {\n                textLayer.setTextContent(textContent);\n                textLayer.render(TEXT_LAYER_RENDER_DELAY);\n            });\n            pageText[page.pageNumber-1] = textLayer; //modified by lwf for new pdf version\n\n            createdPageCount += 1;\n            if (createdPageCount === (pdfDocument.numPages)) {\n                completeLoading();\n            }\n        }\n\n        this.initialize = function (viewContainer, location) {\n            var self = this,\n                i,\n                pluginCSS;\n\n\n            init(function () {\n                PDFJS.GlobalWorkerOptions.workerSrc = \"./skylark-pdfjs-worker-all.js\"; //PDFJS.workerSrc = \"./skylark-pdfjs-worker-all.js\"; modified by lwf for new pdf version\n                //PDFJS.getDocument(location).then(function loadPDF(doc) {\n                PDFJS.getDocument(location).promise.then(function loadPDF(doc) {\n                    pdfDocument = doc;\n                    container = viewContainer;\n\n                    for (i = 0; i < pdfDocument.numPages; i += 1) {\n                        pdfDocument.getPage(i + 1).then(createPage);\n                    }\n                });\n            });\n        };\n\n        this.isSlideshow = function () {\n            return isGuessedSlideshow;\n        };\n\n        this.onLoad = function () {};\n\n        this.getPages = function () {\n            return domPages;\n        };\n\n        this.fitToWidth = function (width) {\n            var zoomLevel;\n\n            if (maxPageWidth === width) {\n                return;\n            }\n            zoomLevel = width / maxPageWidth;\n            self.setZoomLevel(zoomLevel);\n        };\n\n        this.fitToHeight = function (height) {\n            var zoomLevel;\n\n            if (maxPageHeight === height) {\n                return;\n            }\n            zoomLevel = height / maxPageHeight;\n            self.setZoomLevel(zoomLevel);\n        };\n\n        this.fitToPage = function (width, height) {\n            var zoomLevel = width / maxPageWidth;\n            if (height / maxPageHeight < zoomLevel) {\n                zoomLevel = height / maxPageHeight;\n            }\n            self.setZoomLevel(zoomLevel);\n        };\n\n        this.fitSmart = function (width, height) {\n            var zoomLevel = width / maxPageWidth;\n            if (height && (height / maxPageHeight) < zoomLevel) {\n                zoomLevel = height / maxPageHeight;\n            }\n            zoomLevel = Math.min(1.0, zoomLevel);\n            self.setZoomLevel(zoomLevel);\n        };\n\n        this.setZoomLevel = function (zoomLevel) {\n            var i, viewport;\n\n            if (scale !== zoomLevel) {\n                scale = zoomLevel;\n\n                for (i = 0; i < pages.length; i += 1) {\n                    viewport = pages[i].getViewport({scale}); //modified by lwf for new pdf version\n                    updatePageDimensions(pages[i], viewport.width, viewport.height);\n                }\n            }\n        };\n\n        this.getZoomLevel = function () {\n            return scale;\n        };\n\n        this.onScroll = function () {\n            var i;\n\n            for (i = 0; i < domPages.length; i += 1) {\n                if (isScrolledIntoView(domPages[i])) {\n                    ensurePageRendered(pages[i]);\n                }\n            }\n        };\n\n        this.getPageInView = function () {\n            var i;\n\n            if (self.isSlideshow()) {\n                return currentPage;\n            } else {\n                for (i = 0; i < domPages.length; i += 1) {\n                    if (isScrolledIntoView(domPages[i])) {\n                        return i + 1;\n                    }\n                }\n            }\n        };\n\n        this.showPage = function (n) {\n            if (self.isSlideshow()) {\n                domPages[currentPage - 1].style.display = \"none\";\n                currentPage = n;\n                ensurePageRendered(pages[n - 1]);\n                domPages[n - 1].style.display = \"block\";\n            } else {\n                scrollIntoView(domPages[n - 1]);\n            }\n        };\n\n        this.getPluginName = function () {\n            return \"PDF.js\"\n        };\n\n        this.getPluginVersion = function () {\n            var version = (String(typeof pdfjs_version) !== \"undefined\"\n                ? pdfjs_version\n                : \"From Source\"\n            );\n            return version;\n        };\n\n        this.getPluginURL = function () {\n            return \"https://github.com/mozilla/pdf.js/\";\n        };\n    }\n\n    return viewerjs.PDFViewerPlugin = PDFViewerPlugin;\n});\ndefine('skylark-viewerjs/plugin_registry',[\n    \"./viewerjs\",\n    \"./ODFViewerPlugin\",\n    \"./PDFViewerPlugin\"\n],function(viewerjs,ODFViewerPlugin,PDFViewerPlugin) {\n    var css,\n        pluginRegistry = [\n        (function() {\n            var odfMimetypes = [\n                'application/vnd.oasis.opendocument.text',\n                'application/vnd.oasis.opendocument.text-flat-xml',\n                'application/vnd.oasis.opendocument.text-template',\n                'application/vnd.oasis.opendocument.presentation',\n                'application/vnd.oasis.opendocument.presentation-flat-xml',\n                'application/vnd.oasis.opendocument.presentation-template',\n                'application/vnd.oasis.opendocument.spreadsheet',\n                'application/vnd.oasis.opendocument.spreadsheet-flat-xml',\n                'application/vnd.oasis.opendocument.spreadsheet-template'];\n            var odfFileExtensions = [\n                'odt',\n                'fodt',\n                'ott',\n                'odp',\n                'fodp',\n                'otp',\n                'ods',\n                'fods',\n                'ots'];\n\n            return {\n                supportsMimetype: function(mimetype) {\n                    return (odfMimetypes.indexOf(mimetype) !== -1);\n                },\n                supportsFileExtension: function(extension) {\n                    return (odfFileExtensions.indexOf(extension) !== -1);\n                },\n                path: \"./ODFViewerPlugin\",\n                getClass: function() { return ODFViewerPlugin; }\n            };\n        }()),\n        {\n            supportsMimetype: function(mimetype) {\n                return (mimetype === 'application/pdf');\n            },\n            supportsFileExtension: function(extension) {\n                return (extension === 'pdf');\n            },\n            path: \"./PDFViewerPlugin\",\n            getClass: function() { return PDFViewerPlugin; }\n        }\n    ];\n\n\n\n    return viewerjs.pluginRegistry = pluginRegistry\n\n});\n\ndefine('skylark-viewerjs/init',[\r\n    \"./viewerjs\",\r\n\t\"./viewer\",\r\n\t\"./plugin_registry\"\r\n\r\n],function(viewerjs,Viewer,pluginRegistry){\r\n\tvar viewer;\r\n\r\n    function parseSearchParameters(location) {\r\n        var parameters = {},\r\n            search = location.search || \"?\";\r\n\r\n        search.substr(1).split('&').forEach(function (q) {\r\n            // skip empty strings\r\n            if (!q) {\r\n                return;\r\n            }\r\n            // if there is no '=', have it handled as if given key was set to undefined\r\n            var s = q.split('=', 2);\r\n            parameters[decodeURIComponent(s[0])] = decodeURIComponent(s[1]);\r\n        });\r\n\r\n        return parameters;\r\n    }\r\n\r\n    function estimateTypeByHeaderContentType(documentUrl, cb) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.onreadystatechange = function() {\r\n            var mimetype, matchingPluginData;\r\n            if (xhr.readyState === 4) {\r\n                if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 0) {\r\n                    mimetype = xhr.getResponseHeader('content-type');\r\n\r\n                    if (mimetype) {\r\n                        pluginRegistry.some(function(pluginData) {\r\n                            if (pluginData.supportsMimetype(mimetype)) {\r\n                                matchingPluginData = pluginData;\r\n                                console.log('Found plugin by mimetype and xhr head: ' + mimetype);\r\n                                return true;\r\n                            }\r\n                            return false;\r\n                        });\r\n                    }\r\n                }\r\n                cb(matchingPluginData);\r\n            }\r\n        };\r\n        xhr.open(\"HEAD\", documentUrl, true);\r\n        xhr.send();\r\n    }\r\n\r\n\r\n    function doEstimateTypeByFileExtension(extension) {\r\n        var matchingPluginData;\r\n\r\n        pluginRegistry.some(function(pluginData) {\r\n            if (pluginData.supportsFileExtension(extension)) {\r\n                matchingPluginData = pluginData;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        return matchingPluginData;\r\n    }\r\n\r\n\r\n    function estimateTypeByFileExtension(extension) {\r\n        var matchingPluginData = doEstimateTypeByFileExtension(extension)\r\n\r\n        if (matchingPluginData) {\r\n            console.log('Found plugin by parameter type: ' + extension);\r\n        }\r\n\r\n        return matchingPluginData;\r\n    }\r\n\r\n\r\n    function estimateTypeByFileExtensionFromPath(documentUrl) {\r\n        // See to get any path from the url and grep what could be a file extension\r\n        var documentPath = documentUrl.split('?')[0],\r\n            extension = documentPath.split('.').pop(),\r\n            matchingPluginData = doEstimateTypeByFileExtension(extension)\r\n\r\n        if (matchingPluginData) {\r\n            console.log('Found plugin by file extension from path: ' + extension);\r\n        }\r\n\r\n        return matchingPluginData;\r\n    }\r\n\r\n\tfunction init() {\r\n\t   window.onload = function () {\r\n\t        var viewer,\r\n\t            documentUrl = document.location.hash.substring(1),\r\n\t            parameters = parseSearchParameters(document.location),\r\n\t            Plugin;\r\n\r\n\t        if (documentUrl) {\r\n\t            // try to guess the title as filename from the location, if not set by parameter\r\n\t            if (!parameters.title) {\r\n\t                parameters.title = documentUrl.replace(/^.*[\\\\\\/]/, '');\r\n\t            }\r\n\r\n\t            parameters.documentUrl = documentUrl;\r\n\r\n\t            // trust the server most\r\n\t            estimateTypeByHeaderContentType(documentUrl, function(pluginData) {\r\n\t                if (!pluginData) {\r\n\t                    if (parameters.type) {\r\n\t                        pluginData = estimateTypeByFileExtension(parameters.type);\r\n\t                    } else {\r\n\t                        // last ressort: try to guess from path\r\n\t                        pluginData = estimateTypeByFileExtensionFromPath(documentUrl);\r\n\t                    }\r\n\t                }\r\n\r\n\t                if (pluginData) {\r\n\t                    if (String(typeof loadPlugin) !== \"undefined\") {\r\n\t                        loadPlugin(pluginData.path, function () {\r\n\t                            Plugin = pluginData.getClass();\r\n\t                            viewer = new Viewer(new Plugin(), parameters);\r\n\t                        });\r\n\t                    } else {\r\n\t                        Plugin = pluginData.getClass();\r\n\t                        viewer = new Viewer(new Plugin(), parameters);\r\n\t                    }\r\n\t                } else {\r\n\t                    viewer = new Viewer();\r\n\t                }\r\n\t            });\r\n\t        } else {\r\n\t            viewer = new Viewer();\r\n\t        }\r\n\t    };\r\n\t}\r\n \r\n \treturn viewerjs.init = init;\r\n});\r\n\r\n\r\n\ndefine('skylark-viewerjs/main',[\r\n\t\"./viewerjs\",\r\n\t\"./viewer\",\r\n\t\"./ODFViewerPlugin\",\r\n\t\"./PDFViewerPlugin\",\r\n\t\"./plugin_registry\",\r\n\t\"./text_layer_builder\",\r\n\t\"./ui_utils\",\r\n\t\"./init\"\r\n],function(viewerjs) {\r\n\treturn viewerjs;\r\n});\ndefine('skylark-viewerjs', ['skylark-viewerjs/main'], function (main) { return main; });\n\n"]}